# Metric Conversion

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Metric Conversion

You are building an app to help people handle converting measurements according to the following chart.

```elixir
Utils.table(:measurements)
```

Users may provide any measurement and a value in a tuple `{measurement, value}`, and convert
it to any other measurement like so.

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurement.convert({:meter, 1}, :centimeter)
{:centimeter, 100}
```

Use the measurements provided by the table to convert values, even when this would deviate from
how these measurements are typically converted. For example, 12 inches is typically 1 foot, however
according to this table it would be `1.016` feet.

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurement.convert({:inch, 12}, :feet)
{1.016, :feet}
```

Enter your solution below.

```elixir
defmodule Measurement do
  def unit_value(unit) do
    unit_value = %{
      millimeter: 0.1,
      meter: 100,
      kilometer: 100_000,
      inch: 2.54,
      feet: 30,
      yard: 91,
      mile: 160_000,
      centimeter: 1
    }

    Map.get(unit_value, unit)
  end

  def convert({unit, number}, new_unit) do
    value = unit_value(unit)
    newval = unit_value(new_unit)
    IO.inspect(newval)

    if value > newval do
      {new_unit, number * (value * newval)}
    else
      {new_unit, number * (value / newval)}
    end
  end
end

Measurement.convert({:millimeter, 1}, :centimeter)
```

```elixir
defmodule Measurement do
  def unit_value(unit) do
    unit_value = %{
      millimeter: 0.1,
      meter: 100,
      kilometer: 100_000,
      inch: 2.54,
      feet: 30,
      yard: 91,
      mile: 160_000,
      centimeter: 1
    }

    Map.get(unit_value, unit)
  end

  def convert({unit, number}, new_unit) do
    value = unit_value(unit)
    newval = unit_value(new_unit)
    IO.inspect(newval)
    {new_unit, number * (value / newval)}
  end
end

Utils.feedback(:metric_measurements, Measurement)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish metric conversion exercise"
```

## Up Next

| Previous                                                         | Next                                                           |
| ---------------------------------------------------------------- | -------------------------------------------------------------: |
| [Rps Pattern Matching](../exercises/rps_pattern_matching.livemd) | [Currency Conversion](../exercises/currency_conversion.livemd) |
