# Item Finder

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Item Search

You are building a game with a search feature for a massive list of magical items.

Players should be able to search for items that match certain properties. They should be able to
search by `type`, `effect`, `level`, `size`, and `style` in a keyword list.

By default, `all_items/2` should find items that match all filters. If there are
no filters it should find all items.

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
items = [
  %{type: "sword", effect: "healing", level: 1, size: 1, style: "holy"},
  %{type: "mace", effect: "protection", level: 2, size: 3, style: "dark"}
]

Search.all_items(items, [])

[
  %{type: "sword", effect: "healing", level: 1, size: 1, style: "holy"},
  %{type: "mace", effect: "protection", level: 2, size: 3, style: "dark"}
]

Search.all_items(items, type: "sword", effect: "healing")
[%{type: "sword", effect: "healing", level: 1, size: 1, style: "holy"}]
```

<!-- livebook:{"break_markdown":true} -->

Users should be able to enter an `inclusive: true` filter to find items that match any of
the properties.

<!-- livebook:{"force_markdown":true} -->

```elixir
Search.all_items(items, type: "sword", effect: "speed", inclusive: true)
[{type: "sword", effect: "healing", level: 1, size: 1, style: "holy"}]
```

<!-- livebook:{"break_markdown":true} -->

Enter your answer in the Elixir cell below.

```elixir
defmodule Search do
  def all_items(items, filters) do
    if Keyword.get(filters, :inclusive) do
      Enum.filter(items, fn item ->
        Enum.any?(filters, fn {attribute, value} ->
          Map.get(item, attribute) == value
        end)
      end)
    else
      Enum.filter(items, fn item ->
        Enum.all?(filters, fn {attribute, value} ->
          Map.get(item, attribute) == value
        end)
      end)
    end
  end
end

# def any_items(items, filters) do

# Enum.filter(items, fn item ->
#  Enum.any?(filters, fn {attribute, value} -> 
#   Map.get(item, attribute) == value
# end)
# end)

items = [
  %{type: "sword", effect: "healing", level: 1, size: 1, style: "holy"},
  %{type: "mace", effect: "protection", level: 2, size: 3, style: "dark"}
]

Search.all_items(items, type: "mace")
```

```elixir
defmodule Search do
  def all_items(items, filters) do
    if Keyword.get(filters, :inclusive) 
      do
     Enum.filter(items, fn item ->
      Enum.any?(filters, fn {attribute, value} -> 
        Map.get(item, attribute) == value
      else
    Enum.filter(items, fn item ->
      Enum.all?(filters, fn {attribute, value} -> 
        Map.get(item, attribute) == value
      end)
    end)
  end

   def any_items(items, filters) do
    
    Enum.filter(items, fn item ->
      Enum.any?(filters, fn {attribute, value} -> 
        Map.get(item, attribute) == value
      end)
    end)
  end


items = [
  %{type: "sword", effect: "healing", level: 1, size: 1, style: "holy"},
  %{type: "mace", effect: "protection", level: 2, size: 3, style: "dark"}
]

Search.all_items(items, type: "mace")
Utils.feedback(:item_generator_search, Search)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish item search exercise"
```

## Up Next

| Previous                                       | Next                                                               |
| ---------------------------------------------- | -----------------------------------------------------------------: |
| [Tally Votes](../exercises/tally_votes.livemd) | [Filter Values By Type](../exercises/filter_values_by_type.livemd) |
