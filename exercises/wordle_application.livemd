# Wordle

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Create A New Mix Project

Using the command line, create a new project in the `projects` folder called `wordle`.

```
mix new wordle
```

## Wordle

In this exercise, you will build a Wordle application. Wordle is a game where users guess a five letter word.
They have 6 guesses and are provided hints based on their previous guesses.

If a letter is in the correct position in the guess, it will highlight green.

If a letter is in the word, but in the incorrect position, it will highlight yellow.

You should be able to start the application using `iex -S mix`

```
iex -S mix
```

Then start playing a Wordle game with `Wordle.play()`.

the Wordle game will randomly generate a word and store the state of the player's game.
Likely, you will rely on a [GenServer](https://hexdocs.pm/elixir/GenServer.html).

```
iex> game = Wordle.play()
```

The player can type in their guess. it should be a five letter string such as `hello`.

The game should then give them feedback on their answer. `G` will mean green, so the letter
is in the correct spot, and `Y` will mean yellow, so the letter is in the word but in the wrong spot.
Incorrect letters will be marked with an underscore `_`.

```
iex> Wordle.guess(game, "hello")
H E L L 0
_ _ _ G Y
```

When the player enters the correct guess, end the game.

```
iex> Wordle.guess(game, "world")
W O R L D
G G G G G

iex> Process.alive?(game)
false

iex> Wordle.guess(game, "")
{:error, :game_not_found}
```

If a player guesses more than 6 times, the game should end with them losing.

```elixir
defmodule Wordle do
  @words [
    "abuse",
    "adult",
    "agent",
    "anger",
    "apple",
    "award",
    "basis",
    "beach",
    "birth",
    "block",
    "blood",
    "board",
    "brain",
    "bread",
    "break",
    "brown",
    "buyer",
    "cause",
    "chain",
    "chair",
    "chest",
    "chief",
    "child",
    "china",
    "claim",
    "class",
    "clock",
    "coach",
    "coast",
    "court",
    "cover",
    "cream",
    "crime",
    "cross",
    "crowd",
    "crown",
    "cycle",
    "dance",
    "death",
    "depth",
    "doubt",
    "draft",
    "drama",
    "dream",
    "dress",
    "drink",
    "drive",
    "earth",
    "enemy",
    "entry"
  ]

  def guess do
    guess(%{
      # |> String.split("", trim: true),
      secret_word: @words |> Enum.random(),
      guesses: []
    })
  end

  def guess(%{} = state) do
    cond do
      won?(state) ->
        IO.puts("you won!")

      lost?(state) ->
        IO.puts("you lost! the word was: #{state.secret_word}")

      :otherwise ->
        render(state)
        next_guess = accept_input()
        guess(%{state | guesses: [next_guess | state.guesses]})
    end
  end

  defp break(string) do
    a = [:one, :two, :three, :four, :five]
    b = String.split(string, "", trim: true)
    List.zip([a, b])
  end

  def yellow(str1, str2) do
    a = String.split(str1, "", trim: true)
    b = String.split(str2, "", trim: true)

    Enum.map(a, fn each -> Enum.member?(b, each) end)
    |> Enum.map(fn x ->
      if x == true do
        "Y"
      else
        "_"
      end
    end)
    |> Enum.join()
  end

  def green(str1, str2) do
    a = break(str1)
    b = break(str2)

    Keyword.merge(a, b, fn _k, v1, v2 ->
      if v1 == v2 do
        "G"
      else
        "_"
      end
    end)
    |> Keyword.values()
    |> Enum.join()
  end

  def both(str1, str2) do
    y = yellow(str1, str2)
    g = green(str1, str2)
    a = break(y)
    b = break(g)

    Keyword.merge(a, b, fn _k, v1, v2 ->
      cond do
        v2 == "G" && v1 == "Y" ->
          "G"

        v2 == "_" && v1 == "Y" ->
          "Y"

        true ->
          "_"
      end
    end)
    |> Keyword.values()
    |> Enum.join(" ")
  end

  def cap(string) do
    string
    |> String.upcase()
    |> String.split("", trim: true)
    |> Enum.join(" ")
  end

  def render(%{} = state) do
    last_guess = List.first(state.guesses)

    IO.puts(cap(last_guess), both(last_guess, state.secret_word))
  end

  def accept_input do
    IO.gets("guess a 5-letter word. >")
  end

  def won?(%{} = state) do
    both(cap(accept_input()), state.secret_word) == "G G G G G"
  end

  def lost?(%{} = state) do
    incorrect_guesses =
      state.guesses
      |> Enum.reject(fn _each ->
        both(cap(accept_input()), state.secret_word) == "G G G G G"
      end)

    Enum.count(incorrect_guesses) > 6
  end
end

Wordle.guess()
```

```elixir
defmodule MyMod do
  def break(string) do
    a = [:one, :two, :three, :four, :five]
    b = String.split(string, "", trim: true)
    List.zip([a, b])
  end

  def yellow(str1, str2) do
    a = String.split(str1, "", trim: true)
    b = String.split(str2, "", trim: true)

    Enum.map(a, fn each -> Enum.member?(b, each) end)
    |> Enum.map(fn x ->
      if x == true do
        "Y"
      else
        "_"
      end
    end)
    |> Enum.join()
  end

  def green(str1, str2) do
    a = break(str1)
    b = break(str2)

    Keyword.merge(a, b, fn _k, v1, v2 ->
      if v1 == v2 do
        "G"
      else
        "_"
      end
    end)
    |> Keyword.values()
    |> Enum.join()
  end

  def both(str1, str2) do
    y = yellow(str1, str2)
    g = green(str1, str2)
    a = break(y)
    b = break(g)

    Keyword.merge(a, b, fn _k, v1, v2 ->
      cond do
        v2 == "G" && v1 == "Y" ->
          "G"

        v2 == "_" && v1 == "Y" ->
          "Y"

        true ->
          "_"
      end
    end)
    |> Keyword.values()
    |> Enum.join(" ")
  end
end

MyMod.both("holly", "world")
```

## Test Cases

Cover the following test cases and ensure your code passes the tests.

* A player guesses the correct word
* A player guesses a completely incorrect word
* A player guesses a partially correct word
* A player guesses 6 times and loses

## (BONUS) Edge Cases

Wordle has a number of edge cases with words that will make providing feedback more difficult.
Add the following additional test cases and ensure you code passes.

* A player guesses a word with similar letters and one is in the correct position (i.e "HELLO" vs "WORLD")
* A player guesses a word with similar letters and both are not in the correct position (i.e "HELLO" vs "LEGAL")
* A player guesses a word with similar letters and only one should be yellow  (i.e "HELLO" vs "GLOBE")

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish wordle application exercise"
```

## Up Next

| Previous                                               | Next                                         |
| ------------------------------------------------------ | -------------------------------------------: |
| [Product Filters](../exercises/product_filters.livemd) | [Supervisors](../reading/supervisors.livemd) |
