# Naming Numbers

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Naming Numbers

In the Elixir cell below, create a function `naming_numbers` which accepts a
single digit integer and returns its string representation. So `1` would become `"one"`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
   0 --> zero
   1 --> one
   2 --> two
   3 --> three
   4 --> four
   5 --> five
   6 --> six
   7 --> seven
   8 --> eight
   9 --> nine
```

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
naming_numbers.(1)
"one"
```

```elixir

```

Replace `nil` with your anonymous function.

<!-- livebook:{"attrs":{"assertions":"assert is_function(naming_numbers),\n  \"Ensure you bind `naming_numbers` to an anonymous function.\"\n\nlist = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n\nEnum.each(1..9, fn integer ->\n  assert naming_numbers.(integer) == Enum.at(list, integer)\nend)","attempts":9,"code":"naming_numbers = fn number ->\n  Enum.at(~w[zero one two three four five six seven eight nine], number)\nend\nnaming_numbers.(0)","solution":"naming_numbers = fn number ->\n  Enum.at(~w[zero one two three four five six seven eight nine], number)\nend\n","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)

      naming_numbers = fn number ->
        Enum.at(~w[zero one two three four five six seven eight nine], number)
      end

      naming_numbers.(0)

      assert is_function(naming_numbers),
             "Ensure you bind `naming_numbers` to an anonymous function."

      list = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]

      Enum.each(1..9, fn integer ->
        assert naming_numbers.(integer) == Enum.at(list, integer)
      end)
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
naming_numbers = fn number ->
  Enum.at(~w[zero one two three four five six seven eight nine], number)
end

naming_numbers.(0)
```

## Numbering Names

In the Elixir cell below, create a function `numbering_names` which accepts a
number's name and returns its string representation. So `"one"` would become `1`.

In addition to accepting lowercase name, also accept uppercase names so `"One"` would become `1`.

```mermaid
flowchart
  zero --> 0
  one --> 1
  two --> 2
  three --> 3
  four --> 4
  five --> 5
  six --> 6
  seven --> 7
  eight --> 8
  nine --> 9
```

```mermaid
flowchart
  Zero --> 0
  One --> 1
  Two --> 2
  Three --> 3
  Four --> 4
  Five --> 5
  Six --> 6
  Seven --> 7
  Eight --> 8
  Nine --> 9
```

<!-- livebook:{"break_markdown":true} -->

Replace `nil` with your anonymous function.

<!-- livebook:{"attrs":{"assertions":"list = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\ncapital_list = Enum.map(list, &String.capitalize/1)\n\nassert is_function(numbering_names),\n  \"Ensure you bind `naming_numbers` to an anonymous function.\"\n\nEnum.each(list, fn name ->\n  assert numbering_names.(name) ==\n    Enum.find_index(list, fn each -> each == String.downcase(name) end)\n  end)\n\nEnum.each(capital_list, fn name ->\n  assert numbering_names.(name) ==\n    Enum.find_index(list, fn each -> each == String.downcase(name) end)\n  end)","attempts":9,"code":"numbering_names = fn number ->\n  ~w[zero one two three four five six seven eight nine]\n  |> Enum.find_index(&(&1 == String.downcase(number)))\nend\nnumbering_names.(\"one\")","solution":"numbering_names = fn number ->\n  ~w[zero one two three four five six seven eight nine]\n  |> Enum.find_index(&(&1 == String.downcase(number)))\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)

      numbering_names = fn number ->
        ~w[zero one two three four five six seven eight nine]
        |> Enum.find_index(&(&1 == String.downcase(number)))
      end

      numbering_names.("one")
      list = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
      capital_list = Enum.map(list, &String.capitalize/1)

      assert is_function(numbering_names),
             "Ensure you bind `naming_numbers` to an anonymous function."

      Enum.each(list, fn name ->
        assert numbering_names.(name) ==
                 Enum.find_index(list, fn each -> each == String.downcase(name) end)
      end)

      Enum.each(capital_list, fn name ->
        assert numbering_names.(name) ==
                 Enum.find_index(list, fn each -> each == String.downcase(name) end)
      end)
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
numbering_names = fn number ->
  ~w[zero one two three four five six seven eight nine]
  |> Enum.find_index(&(&1 == String.downcase(number)))
end

numbering_names.("one")
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish naming numbers exercise"
```

## Up Next

| Previous                                       | Next                                             |
| ---------------------------------------------- | -----------------------------------------------: |
| [Control Flow](../reading/control_flow.livemd) | [Rpg Dialogue](../exercises/rpg_dialogue.livemd) |
