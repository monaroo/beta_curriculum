# Inventory Management

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Inventory Management

We're going to build an in-memory inventory management application. We need to be able to
start a process and return it's PID.

<!-- livebook:{"force_markdown":true} -->

```elixir
pid = Warehouse.start()
```

We should be able to store an item with a quantity in our warehouse. If we
store the same item in should increase the quantity.

<!-- livebook:{"force_markdown":true} -->

```elixir
Warehouse.store(pid, :apples, 5)
Warehouse.store(pid, :apples, 10)
```

We should be able to retrieve the current quantity of an item in our warehouse.

<!-- livebook:{"force_markdown":true} -->

```elixir
15 = Warehouse.quantity(pid, :apples)
```

You are free to solve the problem how you see fit. However, you might consider using a [GenServer](https://hexdocs.pm/elixir/GenServer.html), [Agent](https://hexdocs.pm/elixir/Agent.html), or `:ets` table.

Enter your solution in the Elixir cell below.

```elixir
defmodule Warehouse do
  def start do
    :ets.new(:warehouse, [:set, :protected])
  end

  def store(warehouse, item, quantity) do
    case :ets.lookup(warehouse, item) do
      [] ->
        :ets.insert(warehouse, {item, quantity})

      list ->
        newquantity = elem(List.first(list), 1) + quantity
        :ets.insert(warehouse, {item, newquantity})
    end
  end

  def quantity(warehouse, item) do
    :ets.lookup(warehouse, item)
  end
end

pid = Warehouse.start()
Warehouse.store(pid, :apples, 5)
Warehouse.store(pid, :apples, 10)
Warehouse.quantity(pid, :apples)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish inventory management exercise"
```

## Up Next

| Previous                                                 | Next                                           |
| -------------------------------------------------------- | ---------------------------------------------: |
| [Caching Agent Ets](../reading/caching_agent_ets.livemd) | [Smart Cache](../exercises/smart_cache.livemd) |
