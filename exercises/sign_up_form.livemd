# Sign Up Form

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Sign Up Form

It's common for applications to have a sign up form that validates a user's email, password, and other information.

Create a `User` module which validates user's information.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, user} =
  User.new(%{
    username: "Peter Parker",
    password: "secret_spider",
    email: "peter@spider.web",
    terms_and_conditions: true
  })
```

We're going to allow any string for the recipient name, domain name, and top level domain.

* `username` (required) a 3-12 character string.
* `password` (required) a 12-50 character string.
* `email` (required) a string in the format `recipient_name@domain_name.top_level_domain`. i.e. `"peter@gmail.com"`.
* `age` (optional) an integer.
* `agreed_to_terms_and_conditions` (required) a boolean which must be `true`.

You should rely on Ecto Changesets and your own custom validation to validate the user information.
Enter your solution below.

```elixir
defmodule User do
  use Ecto.Schema
  import Ecto.Changeset
  defstruct [:username, :password, :age, :agreed_to_terms_and_conditions]

  @types %{
    username: :string,
    password: :string,
    email: :string,
    age: :integer,
    agreed_to_terms_and_conditions: :boolean
  }

  def changeset(%User{} = user, params) do
    {user, @types}
    |> cast(params, [:username, :password, :email, :age, :agreed_to_terms_and_conditions])
    |> validate_required([:username, :password])
    |> validate_format(:email, ~r/@/)
    |> validate_length(:username, min: 3, max: 12)
    |> validate_length(:password, min: 12, max: 50)
    |> validate_acceptance(:agreed_to_terms_and_conditions)
  end

  def new(params) do
    %User{}
    |> changeset(params)
    |> apply_action(:update)
  end
end

User.new(%{
  username: "bobthesnob3",
  age: 45,
  password: "cr01ss4ntsRlyf3",
  email: "bob.bongus@bobb.com",
  agreed_to_terms_and_conditions: true
})
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish sign up form exercise"
```

## Up Next

| Previous                                     | Next                                     |
| -------------------------------------------- | ---------------------------------------: |
| [File Types](../exercises/file_types.livemd) | [Processes](../reading/processes.livemd) |
