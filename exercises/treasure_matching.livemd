# Treasure Matching

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Treasure Matching

In this exercise, you're going to use **pattern matching** to extract the `"jewel"`
string from the data provided and bind it to a `jewel` variable. The first exercise is complete for example.

```elixir
[_, _, _, jewel] = [1, 2, 3, "jewel"]
jewel
```

```elixir
[_, _, _, jewel] = [1, 2, 3, "jewel"]
jewel

Utils.feedback(:jewel, jewel)
```

Replace `nil` with your answer.

```elixir
[_, _, _, jewel] = [1, 2, 3, "jewel"]
jewel
```

```elixir
[_, _, _, jewel] = [1, 2, 3, "jewel"]

Utils.feedback(:jewel, jewel)
```

```elixir
key2 = %{key1: "value", key2: "jewel"}
jewel
```

```elixir
key2 = %{key1: "value", key2: "jewel"}

Utils.feedback(:jewel, jewel)
```

```elixir
one = %{1 => "jewel"}
jewel

Utils.feedback(:jewel, jewel)
```

```elixir
key = %{%{key: [1, 2, 3, 4, 5, {}]} => "jewel"}
jewel
```

```elixir
key = %{%{key: [1, 2, 3, 4, 5, {}]} => "jewel"}

Utils.feedback(:jewel, jewel)
```

```elixir
east = %{north: %{south: %{west: %{east: "jewel"}}}}
jewel
```

```elixir
east = %{north: %{south: %{west: %{east: "jewel"}}}}

Utils.feedback(:jewel, jewel)
```

```elixir
one = %{"jewel" => 1}
jewel
```

```elixir
one = %{"jewel" => 1}

Utils.feedback(:jewel, jewel)
```

```elixir
[_, jewel] = [2, "jewel"]
jewel
```

```elixir
two = [2, "jewel"]
jewel
```

```elixir
two = [2, "jewel"]

Utils.feedback(:jewel, jewel)
```

```elixir
one = ["jewel", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
jewel
```

```elixir
one = ["jewel", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Utils.feedback(:jewel, jewel)
```

```elixir
one = [1, "jewel", 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Utils.feedback(:jewel, jewel)
```

```elixir
one = [1, "jewel", 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
jewel
```

```elixir
three = [1, 2, "jewel", 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
jewel
Utils.feedback(:jewel, jewel)
```

```elixir
one = [[], [1, [2, "jewel"]]]
jewel
```

```elixir
one = [[], [1, [2, "jewel"]]]
jewel
Utils.feedback(:jewel, jewel)
```

```elixir
"here is the " <> jewel = "here is the jewel"
jewel
```

```elixir
"here is the " <> jewel = "here is the jewel"
jewel
Utils.feedback(:jewel, jewel)
```

```elixir
{jewel} = {"jewel"}
jewel
```

```elixir
{jewel} = {"jewel"}

Utils.feedback(:jewel, jewel)
```

```elixir
{jewel, _} = {"jewel", 1}

Utils.feedback(:jewel, jewel)
```

```elixir
{_, _, jewel} = {1, 2, "jewel"}

Utils.feedback(:jewel, jewel)
```

```elixir
[jewel | _] = ["jewel"] ++ Enum.to_list(1..100)

Utils.feedback(:jewel, jewel)
```

```elixir
[key: jewel] = [key: "jewel"]

Utils.feedback(:jewel, jewel)
```

```elixir
Enum.map(1..4, fn each -> (each == 2 && "jewel") || each end)
```

```elixir
[1, jewel, 3, 4] = Enum.map(1..4, fn each -> (each == 2 && "jewel") || each end)

Utils.feedback(:jewel, jewel)
```

```elixir
Enum.map(1..4, &((&1 > 3 && "jewel") || &1))
```

```elixir
[_, _, _, jewel] = Enum.map(1..4, &((&1 > 3 && "jewel") || &1))
jewel
```

```elixir
[_, _, _, jewel] = Enum.map(1..4, &((&1 > 3 && "jewel") || &1))

Utils.feedback(:jewel, jewel)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish treasure matching exercise"
```

## Up Next

| Previous                                               | Next                                                             |
| ------------------------------------------------------ | ---------------------------------------------------------------: |
| [Pattern Matching](../reading/pattern_matching.livemd) | [Rps Pattern Matching](../exercises/rps_pattern_matching.livemd) |
