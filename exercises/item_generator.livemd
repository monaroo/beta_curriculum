# Item Generator

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Generate Items

### Define An Item Struct

You are building a game with a massive list of magical items.

An `Item` struct will have a `type`, `effect`, `level`, `size`, and `style`.

In the Elixir cell below, define an `Item` struct.

```elixir
defmodule Item do
  defstruct [:type, :effect, :level, :size, :style]
end
```

<!-- livebook:{"attrs":{"assertions":"assert Keyword.get(Item.__info__(:functions), :__struct__),\n        \"Ensure you use `defstruct`.\"\n\nassert match?(%{type: nil, effect: nil, level: nil, size: nil, style: nil}, struct(Item)),\n        \"Ensure you use `defstruct` with :type, :effect, :level, :size, and :style.\"","attempts":6,"code":"d","solution":"defmodule Item do\n  defstruct [:type, :effect, :level, :size, :style]\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      d

      assert Keyword.get(Item.__info__(:functions), :__struct__),
             "Ensure you use `defstruct`."

      assert match?(%{type: nil, effect: nil, level: nil, size: nil, style: nil}, struct(Item)),
             "Ensure you use `defstruct` with :type, :effect, :level, :size, and :style."
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
d
```

### Generate Every Permutation of Items

You have been given the possible `types`, `effects`, `levels`, `sizes`, and `styles`. In the Elixir cell below,
generate a list `items` with every possible combination of item properties. Each should be an `Item` struct.

Replace `nil` with your answer.

```elixir
types = [
  "sword",
  "halberd",
  "crossbow",
  "hammer",
  "mace",
  "longsword",
  "shortsword",
  "longbow"
]

effects = [
  "protection",
  "healing",
  "speed",
  "power",
  "jump"
]

styles = ["holy", "dark", "heroic", "crude", "mundane", "lavish"]
sizes = 1..10
levels = 1..100

items =
  for type <- types,
      effect <- effects,
      style <- styles,
      size <- sizes,
      level <- levels do
    %Item{type: type, effect: effect, style: style, size: size, level: level}
  end
```

<!-- livebook:{"attrs":{"assertions":"solutions_item_generator = \n  for type <- types,\n    effect <- effects,\n    style <- styles,\n    size <- sizes,\n    level <- levels do\n    %Item{type: type, effect: effect, style: style, size: size, level: level}\n  end\n\nassert is_list(items), \"`items` should be a list.\"\n\nexpected_items = solutions_item_generator\n\nexpected_length = length(expected_items)\n\nassert length(items) == expected_length,\n        \"There should be #{expected_length} permutations of items.\"\n\nEnum.each(items, fn item ->\n  assert is_struct(item), \"Each item should be an `Item` struct.\"\n  assert match?(%{type: _, effect: _, style: _, size: _, level: _, __struct__: _}, item)\nend)","attempts":16,"code":"types = [\r\n  \"sword\",\r\n  \"halberd\",\r\n  \"crossbow\",\r\n  \"hammer\",\r\n  \"mace\",\r\n  \"longsword\",\r\n  \"shortsword\",\r\n  \"longbow\"\r\n]\r\n\r\neffects = [\r\n  \"protection\",\r\n  \"healing\",\r\n  \"speed\",\r\n  \"power\",\r\n  \"jump\"\r\n]\r\n\r\nstyles = [\"holy\", \"dark\", \"heroic\", \"crude\", \"mundane\", \"lavish\"els = 1..100]e\nitems = for type <- types,\n        effect <- effects,\n        style <- styles,\n        size <- sizes,\n       level <- levels do\n    %Item{type: type, effect: effect, style: style, size: size, level: level}\n  endl: level}\nfor\ntype <- types,\neffect <- effects,\nstyle <- styles,\nsize <- sizes,\nlevel <- levels\ndo\n  %Item{type: type, effect: effect, style: style, size: size, level: level}\nend= 1..100\r\n\r\nitems = nil","solution":"items =\n  for type <- types,\n    effect <- effects,\n    style <- styles,\n    size <- sizes,\n    level <- levels do\n    %Item{type: type, effect: effect, style: style, size: size, level: level}\n  end","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      types = [
  "sword",
  "halberd",
  "crossbow",
  "hammer",
  "mace",
  "longsword",
  "shortsword",
  "longbow"
]

effects = [
  "protection",
  "healing",
  "speed",
  "power",
  "jump"
]

styles = ["holy", "dark", "heroic", "crude", "mundane", "lavish"els = 1..100]e
items = for type <- types,
        effect <- effects,
        style <- styles,
        size <- sizes,
       level <- levels do
    %Item{type: type, effect: effect, style: style, size: size, level: level}
  endl: level}
for
type <- types,
effect <- effects,
style <- styles,
size <- sizes,
level <- levels
do
  %Item{type: type, effect: effect, style: style, size: size, level: level}
end= 1..100

items = nil
      solutions_item_generator = 
  for type <- types,
    effect <- effects,
    style <- styles,
    size <- sizes,
    level <- levels do
    %Item{type: type, effect: effect, style: style, size: size, level: level}
  end

assert is_list(items), "`items` should be a list."

expected_items = solutions_item_generator

expected_length = length(expected_items)

assert length(items) == expected_length,
        "There should be #{expected_length} permutations of items."

Enum.each(items, fn item ->
  assert is_struct(item), "Each item should be an `Item` struct."
  assert match?(%{type: _, effect: _, style: _, size: _, level: _, __struct__: _}, item)
end)
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
types = [
  "sword",
  "halberd",
  "crossbow",
  "hammer",
  "mace",
  "longsword",
  "shortsword",
  "longbow"
]

effects = [
  "protection",
  "healing",
  "speed",
  "power",
  "jump"
]

styles = ["holy", "dark", "heroic", "crude", "mundane", "lavish"els = 1..100]e
items = for type <- types,
        effect <- effects,
        style <- styles,
        size <- sizes,
       level <- levels do
    %Item{type: type, effect: effect, style: style, size: size, level: level}
  endl: level}
for
type <- types,
effect <- effects,
style <- styles,
size <- sizes,
level <- levels
do
  %Item{type: type, effect: effect, style: style, size: size, level: level}
end= 1..100

items = nil

```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish item generator exercise"
```

## Up Next

| Previous                                               | Next                                           |
| ------------------------------------------------------ | ---------------------------------------------: |
| [Bottles Of Soda](../exercises/bottles_of_soda.livemd) | [Tally Votes](../exercises/tally_votes.livemd) |
