# Filter Values By Type

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Filter Values By Type

Given a list of random items that could be any type, you are going to find all of the items that match a particular type.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Filter.floats([1, 2, 3, 4.0])
[4.0]

Filter.integers([1, 2, 3, 4.0])
[1, 2, 3]

Filter.maps(["hello", 4.0, %{key: "value"}, %{}])
[%{key: "value"}, %{}]
```

<!-- livebook:{"break_markdown":true} -->

Implement the `Filter` module below.

```elixir

```

```elixir
defmodule Filter do
  def integers(list) do
    Enum.filter(list, &is_integer/1)
  end

  def floats(list) do
    Enum.filter(list, &is_float/1)
  end

  # numbers include floats and integers
  def numbers(list) do
    Enum.filter(list, fn number -> is_integer(number) || is_float(number) end)
  end

  def atoms(list) do
    Enum.filter(list, &is_atom/1)
  end

  # lists will include keyword lists.
  def lists(list) do
    Enum.filter(list, &is_list/1)
  end

  def maps(list) do
    Enum.filter(list, &is_map/1)
  end

  # keyword lists will include empty lists.
  def keyword_lists(list) do
    list
    |> lists()
    |> Enum.filter(fn l ->
      Enum.all?(l, fn
        {key, _} -> is_atom(key)
        _ -> false
      end)
    end)
  end
end

# is_tuple(is_atom(coll) && is_integer(coll)
# &&  is_tuple(is_atom(coll) && is_integer(coll) || coll == []
Utils.feedback(:filter_by_type, Filter)
```

```elixir
defmodule MyEnum do
  def filter(collection, predicate) do
    do_filter(collection, [], predicate)
  end

  defp do_filter([], output, _predicate), do: Enum.reverse(output)

  defp do_filter([h | t] = input, output, predicate) do
    if predicate.(h) do
      do_filter(t, [h | output], predicate)
    else
      do_filter(t, output, predicate)
    end
  end
end

MyEnum.filter([1, 2, 3, 4, 5], fn x -> rem(x, 2) == 0 end)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish filter values by type exercise"
```

## Up Next

| Previous                                       | Next                                             |
| ---------------------------------------------- | -----------------------------------------------: |
| [Item Search](../exercises/item_search.livemd) | [Bingo Winner](../exercises/bingo_winner.livemd) |
