# Dominoes

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Dominoes

[Dominoes](https://en.wikipedia.org/wiki/Dominoes) are square tiles often placed near each other to make satisfying effects when it falls and knocks each other over.

You're going to make three `Domino` processes under a [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) (`Domino1`, `Domino2`, and `Domino3`), then
have them terminate and restart sequentially.

```mermaid
flowchart
S[Supervisor]
S --> Domino1
S --> Domino2
S --> Domino3
```

You should be able to cause each `Domino` process to crash by sending it a `:fall` message.

We've created the `Domino1` server for sake of example.

```elixir
defmodule Domino1 do
  use GenServer

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def init(state) do
    {:ok, state}
  end

  def handle_info(:fall, _state) do
    raise "Domino 1 falls"
  end
end
```

Create the `Domino2` and `Domino3` modules. Then configure them with a supervisor such that
each `Domino` process terminates (and restarts) one after the other.

For example:

* `Domino1` receives the `:fall` message. `Domino1` crashes. `Domino2` then `Domino3` are terminated by the supervisor.
* `Domino2` receives the `:fall` message. `Domino2` crashes. `Domino3` is terminated by the supervisor.

<details>
<summary>Hint</summary>
Use the <code>:rest_for_one</code> strategy for your supervisor.
</details>

```elixir
defmodule Domino2 do
  use GenServer

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def init(state) do
    {:ok, state}
  end

  def handle_info(:fall, _state) do
    raise "Domino 2 falls"
  end
end

defmodule Domino3 do
  use GenServer

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def init(state) do
    {:ok, state}
  end

  def handle_info(:fall, _state) do
    raise "Domino 3 falls"
  end
end

children = [
  {Domino1, []},
  {Domino2, []},
  {Domino3, []}
]

{:ok, pid} = Supervisor.start_link(children, strategy: :rest_for_one)
```

```elixir
Supervisor.which_children(pid)
```

```elixir
Supervisor.which_children(pid)
|> Enum.at(1)
|> elem(1)
|> Process.send(:fall, [])
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish dominoes exercise"
```

## Up Next

| Previous                                                 | Next                                                     |
| -------------------------------------------------------- | -------------------------------------------------------: |
| [Supervised Stack](../exercises/supervised_stack.livemd) | [Creature Spawner](../exercises/creature_spawner.livemd) |
