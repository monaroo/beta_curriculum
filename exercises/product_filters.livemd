# Product Filters

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Product Filters

We have an application where users search for products based on certain filters.
Products have a `:name`, `:category`, and `:price` (in cents).

<!-- livebook:{"force_markdown":true} -->

```elixir
products = [
  %{name: "Laptop", category: :tech, price: 100000},
  %{name: "Phone", category: :tech, price: 50000},
  %{name: "Chocolate", category: :snacks, price: 200},
  %{name: "Shampoo", category: :health, price: 1000}
]
```

Test and implement a `Products.filter/2` function which accepts a list of items
and a filter. It should be able to filter by a partial case-insensitive name, by an exact category, and by
an inclusive minimum and maximum price.

<!-- livebook:{"force_markdown":true} -->

```elixir
Products.filter(products, name: "l")
[
  %{name: "Chocolate", category: :snacks, price: 200},
  %{name: "Laptop", category: :tech, price: 100000}
]

Products.filter(products, category: :tech)
[
  %{name: "Laptop", category: :tech, price: 100000}
  %{name: "Phone", category: :tech, price: 50000}
]

Products.filter(products, min: 1000)
[
  %{name: "Laptop", category: :tech, price: 100000},
  %{name: "Phone", category: :tech, price: 50000},
  %{name: "Shampoo", category: :health, price: 1000},
]

Products.filter(products, max: 1000)
[
  %{name: "Chocolate", category: :snacks, price: 200},
  %{name: "Shampoo", category: :health, price: 1000},
]

Products.filter(products, min: 300, max: 1200)
[
  %{name: "Shampoo", category: :health, price: 1000},
]

Products.filter(products, name: "P", max: 100000, min: 50000, category: :tech)
[
  %{name: "Laptop", category: :tech, price: 100000},
  %{name: "Phone", category: :tech, price: 50000},
]
```

Ensure you include at least one test for each filter, and one test which combines all filters.

```elixir
defmodule Products do
  def filter_by_name(products, nil) do
    products
  end

  def filter_by_name(products, name) do
    Enum.filter(products, fn p -> p.name =~ ~r/#{name}/i end)
  end

  def filter_by_category(products, nil) do
    products
  end

  def filter_by_category(products, category) do
    Enum.filter(products, fn x -> x.category == category end)
  end

  def filter_min_price(products, nil) do
    products
  end

  def filter_min_price(products, min) do
    Enum.filter(products, fn x -> x.price >= min end)
  end

  def filter_max_price(products, nil) do
    products
  end

  def filter_max_price(products, max) do
    Enum.filter(products, fn x -> x.price <= max end)
  end

  def filter(products, filters) do
    products
    |> filter_by_name(Keyword.get(filters, :name))
    |> filter_by_category(Keyword.get(filters, :category))
    |> filter_min_price(Keyword.get(filters, :min))
    |> filter_max_price(Keyword.get(filters, :max))
  end
end

ExUnit.start(auto_run: false)

defmodule ProductTests do
  use ExUnit.Case

  test "tests name filter" do
    products = [
      %{name: "Laptop", category: :tech, price: 100_000},
      %{name: "Phone", category: :tech, price: 50000},
      %{name: "Chocolate", category: :snacks, price: 200},
      %{name: "Shampoo", category: :health, price: 1000}
    ]

    assert Products.filter(products, name: "c") ===
             [%{name: "Chocolate", category: :snacks, price: 200}]
  end

  test "tests category filter" do
    products = [
      %{name: "Laptop", category: :tech, price: 100_000},
      %{name: "Phone", category: :tech, price: 50000},
      %{name: "Chocolate", category: :snacks, price: 200},
      %{name: "Shampoo", category: :health, price: 1000}
    ]

    assert Products.filter(products, category: :tech) ===
             [
               %{name: "Laptop", category: :tech, price: 100_000},
               %{name: "Phone", category: :tech, price: 50000}
             ]
  end

  test "tests price filter" do
    products = [
      %{name: "Laptop", category: :tech, price: 100_000},
      %{name: "Phone", category: :tech, price: 50000},
      %{name: "Chocolate", category: :snacks, price: 200},
      %{name: "Shampoo", category: :health, price: 1000}
    ]

    assert Products.filter(products, min: 0, max: 50000) ===
             [
               %{name: "Phone", category: :tech, price: 50000},
               %{name: "Chocolate", category: :snacks, price: 200},
               %{name: "Shampoo", category: :health, price: 1000}
             ]
  end

  test "tests all filters" do
    products = [
      %{name: "Laptop", category: :tech, price: 100_000},
      %{name: "Phone", category: :tech, price: 50000},
      %{name: "Chocolate", category: :snacks, price: 200},
      %{name: "Shampoo", category: :health, price: 1000}
    ]

    assert Products.filter(products, name: "o", category: :tech, min: 0, max: 500_000) ===
             [
               %{name: "Laptop", category: :tech, price: 100_000},
               %{name: "Phone", category: :tech, price: 50000}
             ]
  end
end

ExUnit.run()
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish product filters exercise"
```

## Up Next

| Previous                           | Next                                                         |
| ---------------------------------- | -----------------------------------------------------------: |
| [Stack](../exercises/stack.livemd) | [Wordle Application](../exercises/wordle_application.livemd) |
