# Pokemon Battle

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Overview

You're going to create a pokemon battle game. If you're not familiar with pokemon, it's a game where
elemental creatures battle.

In this game, you're going to create a few pokemon, `charmander`, `squirtle`, and `bulbasaur`
then have them battle.

Some Elixir cells in this exercise will rely on previous solutions, so ensure that you
use the `ea` command to evaluate all cells. Otherwise, your prior code may be stale and result in bugs.

## Define A Pokemon Struct

In the Elixir cell below, define a `Pokemon` struct with the keys `:name`, `:type`, `health`, `:attack`, and `:speed`.

* `:name` will be a string.
* `:type` will be an atom of either `:grass`, `:water`, or `:fire`
* `:health` will be an integer with a default value of `20`
* `:attack` will be an integer with a default value of `5`
* `:speed` will be an integer

<!-- livebook:{"attrs":{"assertions":"assert Keyword.get(Pokemon.__info__(:functions), :__struct__),\n  \"Ensure you use `defstruct`.\"\n\nassert match?(%{name: nil, type: nil, speed: nil}, struct(Pokemon)),\n  \"Ensure you use `defstruct` with :name, :type, :health, :attack, and :speed.\"\n\nassert match?(%{health: 20, attack: 5}, struct(Pokemon)),\n  \"Ensure :health has a default value of 20 and :attack has a default value of 5.\"","attempts":3,"code":"defmodule Pokemon do\n  defstruct [:name, :type, :speed, health: 20, attack: 5]\r\nend","solution":"defmodule Pokemon do\n  defstruct [:name, :type, :speed, health: 20, attack: 5]\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)

      defmodule Pokemon do
        defstruct [:name, :type, :speed, health: 20, attack: 5]
      end

      assert Keyword.get(Pokemon.__info__(:functions), :__struct__),
             "Ensure you use `defstruct`."

      assert match?(%{name: nil, type: nil, speed: nil}, struct(Pokemon)),
             "Ensure you use `defstruct` with :name, :type, :health, :attack, and :speed."

      assert match?(%{health: 20, attack: 5}, struct(Pokemon)),
             "Ensure :health has a default value of 20 and :attack has a default value of 5."
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
defmodule Pokemon do
  defstruct [:name, :type, :speed, health: 20, attack: 5]
end
```

## Create 3 Pokemon

In the Elixir cell below, create 3 variables `charmander`, `bulbasaur`, and `squirtle`.
Bind each variable to a `Pokemon` struct with the following stats.

```mermaid
classDiagram
    class Charmander {
        type: :fire
        speed: 20
    }
    class Bulbasaur {
        type: :grass
        speed: 15
    }
    class Squirtle {
        type: :water
        speed: 10
    }
```

Replace `nil` with your solution.

```elixir
charmander = %Pokemon{name: "Charmander", type: :fire, speed: 20}
bulbasaur = %Pokemon{name: "Bulbasaur", type: :grass, speed: 15}
squirtle = %Pokemon{name: "Squirtle", type: :water, speed: 10}
```

<!-- livebook:{"attrs":{"assertions":"assert is_struct(charmander), \"Ensure `charmander` is a struct.\"\nassert is_struct(squirtle), \"Ensure `squirtle` is a struct.\"\nassert is_struct(bulbasaur), \"Ensure `bulbasaur` is a struct.\"\n\nassert %Pokemon{name: \"Charmander\", type: :fire, attack: 5, health: 20, speed: 20} = charmander\nassert %Pokemon{name: \"Bulbasaur\", type: :grass, attack: 5, health: 20, speed: 15} = bulbasaur\nassert %Pokemon{name: \"Squirtle\", type: :water, attack: 5, health: 20, speed: 10} = squirtle","attempts":7,"code":"charmander = %Pokemon{name: \"Charmander\", type: :fire, speed: 20}\r\nbulbasaur =%Pokemon{name: \"Bulbasaur\", type::grass\", speed: 15l\r\nsquirtle %Pokemon{name: \"Squirtle\", type:waterr\", speed: 1il","solution":"charmander = %Pokemon{name: \"Charmander\", type: :fire, speed: 20}\nbulbasaur = %Pokemon{name: \"Bulbasaur\", type: :grass, speed: 15}\nsquirtle = %Pokemon{name: \"Squirtle\", type: :water, speed: 10}","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      charmander = %Pokemon{name: "Charmander", type: :fire, speed: 20}
bulbasaur =%Pokemon{name: "Bulbasaur", type::grass", speed: 15l
squirtle %Pokemon{name: "Squirtle", type:waterr", speed: 1il
      assert is_struct(charmander), "Ensure `charmander` is a struct."
assert is_struct(squirtle), "Ensure `squirtle` is a struct."
assert is_struct(bulbasaur), "Ensure `bulbasaur` is a struct."

assert %Pokemon{name: "Charmander", type: :fire, attack: 5, health: 20, speed: 20} = charmander
assert %Pokemon{name: "Bulbasaur", type: :grass, attack: 5, health: 20, speed: 15} = bulbasaur
assert %Pokemon{name: "Squirtle", type: :water, attack: 5, health: 20, speed: 10} = squirtle
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
charmander = %Pokemon{name: "Charmander", type: :fire, speed: 20}
bulbasaur =%Pokemon{name: "Bulbasaur", type::grass", speed: 15l
squirtle %Pokemon{name: "Squirtle", type:waterr", speed: 1il

```

## Pokemon Battle

Create a `PokemonBattle` module with the following functions:

### attack/2

Create an `attack/2` function which:

* accepts two pokemon structs as parameters.
* return an updated version of the second pokemon struct.
* subtract the first pokemon's attack from the second pokemon's health.
* double the damage dealt if the pokemon has a type advantage.
* half the damage dealt if the pokemon has a type weakness.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
squirtle = %Pokemon{name: "Squirtle", type: :water, attack: 10}
charmander = %Pokemon{name: "Charmander", type: :fire, health: 20}

PokemonBattle.attack(squirtle, charmander)
%Pokemon{name: "Charmander", type: :fire, health: 0, speed: nil, attack: 5}
```

<!-- livebook:{"break_markdown":true} -->

Use the following type advantages to determine half or double damage.

* `:fire` beats `:grass`
* `:grass` beats `:water`
* `:water` beats `:fire`

<!-- livebook:{"break_markdown":true} -->

### battle/2

Create a `battle/2` function which:

* accepts two pokemon structs as parameters.
* `attack/2` with the pokemon that has the higher speed. If their speed is the same attack the second pokemon first.
* if the attacked pokemon is still above 0 health, attack with the second pokemon.
* returns two updated pokemon structs in a tuple.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
charmander = %Pokemon{name: "Charmander", type: :fire, speed: 20}
squirtle = %Pokemon{name: "Squirtle", type: :water, speed: 10}

PokemonBattle.battle(charmander, squirtle)
{
    %Pokemon{name: "Charmander", type: :fire, health: 10, speed: 20, attack: 5},
    %Pokemon{name: "Squirtle", type: :water, health: 17.5, speed: 10, attack: 5}
}

charizard = %Pokemon{name: "Charizard", type: :fire, speed: 20, attack: 20}
blastoise = %Pokemon{name: "Blastoise", type: :water, speed: 10, health: 10}

# the faster pokemon will not receive damage if the slower pokemon's health is 0.
PokemonBattle.battle(charizard, blastoise)
{
    %Pokemon{name: "Charizard", type: :fire, health: 20, speed: 20, attack: 20},
    %Pokemon{name: "Blastoise", type: :water, health: 0, speed: 10, attack: 5}
}
```

```elixir
defmodule PokemonBattle do
  def attack(%Pokemon{} = attacker, %Pokemon{} = defender) do
    %{defender | health: defender.health - attackpoints(attacker, defender)}
  end

  defp attackpoints(%Pokemon{type: :fire, attack: attack}, %Pokemon{type: :grass}) do
    attack * 2
  end

  defp attackpoints(%Pokemon{type: :grass, attack: attack}, %Pokemon{type: :fire}) do
    attack / 2
  end

  defp attackpoints(%Pokemon{type: :water, attack: attack}, %Pokemon{type: :fire}) do
    attack * 2
  end

  defp attackpoints(%Pokemon{type: :fire, attack: attack}, %Pokemon{type: :water}) do
    attack / 2
  end

  defp attackpoints(%Pokemon{type: :grass, attack: attack}, %Pokemon{type: :water}) do
    attack * 2
  end

  defp attackpoints(%Pokemon{type: :water, attack: attack}, %Pokemon{type: :grass}) do
    attack / 2
  end

  defp attackpoints(%Pokemon{type: type, attack: attack}, %Pokemon{type: type}) do
    attack
  end

  def battle(%Pokemon{speed: speed1} = poke1, %Pokemon{speed: speed2} = poke2) do
    if speed1 > speed2 do
      do_battle(poke1, poke2)
    else
      do_battle(poke2, poke1)
    end
  end

  defp do_battle(poke1, poke2) do
    case attack(poke1, poke2) do
      %Pokemon{health: 0} = dead ->
        {poke1, dead}

      newpoke2 ->
        newpoke1 = attack(newpoke2, poke1)
        {newpoke1, newpoke2}
    end
  end
end

PokemonBattle.attack(charmander, squirtle)
PokemonBattle.battle(squirtle, bulbasaur)
```

<!-- livebook:{"attrs":{"assertions":"assert Keyword.get(Pokemon.__info__(:functions), :__struct__),\n        \"Ensure you complete the `Pokemon` module above first.\"\n\nassert match?(\n          %{name: nil, type: nil, speed: nil, health: 20, attack: 5},\n          struct(Pokemon)\n        ),\n        \"Ensure you complete the `Pokemon` module above first.\"\n\npokemon_types =\n  for speed <- 10..30//5,\n      type <- [:water, :fire, :grass],\n      attack <- 5..40//5,\n      health <- 5..20//5 do\n    struct(Pokemon, %{\n      name: \"#{Atom.to_string(type)} pokemon\",\n      speed: speed,\n      attack: attack,\n      health: health,\n      type: type\n    })\n  end\n\npokemon_types\n|> Enum.shuffle()\n|> Enum.take(2)\n|> Enum.chunk_every(2)\n|> Enum.each(fn [pokemon1, pokemon2] ->\n  attacked_pokemon = PokemonBattle.attack(pokemon1, pokemon2)\n\n  multiplier = Utils.Solutions.PokemonBattle.multiplier(pokemon1, pokemon2)\n\n  assert attacked_pokemon == %Pokemon{\n            pokemon2\n            | health: pokemon2.health - pokemon1.attack * multiplier\n          }\n\n  PokemonBattle.battle(pokemon1, pokemon2)\n\n  assert {battled_pokemon1, battled_pokemon2} =\n            PokemonBattle.battle(pokemon1, pokemon2)\n\n  {expected_battled_pokemon1, expected_battled_pokemon2} =\n    Utils.Solutions.PokemonBattle.battle(pokemon1, pokemon2)\n\n  assert battled_pokemon1 == expected_battled_pokemon1\n  assert battled_pokemon2 == expected_battled_pokemon2\nend)","attempts":1,"code":"defmodule PokemonBattle do\n  #def battle(pokemon1, pokemon2) do\n   # cond\n      #pokemon1.type == :fire && pokemon2.type == :grass -> \"\"\r  #end\n\n  def attack(poke1, poke2) do\n    poke2.health - poke1.attack\n  end\nend\n\nPokemonBattle.attack(charmander, squirtle)d","solution":"defmodule PokemonBattle do\n  def attack(emetter, receiver) do\n    damage = emetter.attack * calc_advantage(emetter.type, receiver.type)\n\n    %Pokemon{receiver | health: receiver.health - damage}\n  end\n\n  def battle(pokemon1, pokemon2) do\n    if pokemon1.speed >= pokemon2.speed do\n      pokemon2 = attack(pokemon1, pokemon2)\n      pokemon1 = if pokemon2.health > 0, do: attack(pokemon2, pokemon1), else: pokemon1\n\n      {pokemon1, pokemon2}\n    else\n      pokemon1 = attack(pokemon2, pokemon1)\n      pokemon2 = if pokemon1.health > 0, do: attack(pokemon1, pokemon2), else: pokemon2\n\n      {pokemon1, pokemon2}\n    end\n  end\n\n  defp calc_advantage(emetter_type, receiver_type) do\n    case {emetter_type, receiver_type} do\n      {:water, :fire} -> 2\n      {:fire, :grass} -> 2\n      {:grass, :water} -> 2\n      {emetter_type, emetter_type} -> 1\n      _ -> 0.5\n    end\n  end\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      defmodule PokemonBattle do
  #def battle(pokemon1, pokemon2) do
   # cond
      #pokemon1.type == :fire && pokemon2.type == :grass -> ""  #end

  def attack(poke1, poke2) do
    poke2.health - poke1.attack
  end
end

PokemonBattle.attack(charmander, squirtle)d
      assert Keyword.get(Pokemon.__info__(:functions), :__struct__),
        "Ensure you complete the `Pokemon` module above first."

assert match?(
          %{name: nil, type: nil, speed: nil, health: 20, attack: 5},
          struct(Pokemon)
        ),
        "Ensure you complete the `Pokemon` module above first."

pokemon_types =
  for speed <- 10..30//5,
      type <- [:water, :fire, :grass],
      attack <- 5..40//5,
      health <- 5..20//5 do
    struct(Pokemon, %{
      name: "#{Atom.to_string(type)} pokemon",
      speed: speed,
      attack: attack,
      health: health,
      type: type
    })
  end

pokemon_types
|> Enum.shuffle()
|> Enum.take(2)
|> Enum.chunk_every(2)
|> Enum.each(fn [pokemon1, pokemon2] ->
  attacked_pokemon = PokemonBattle.attack(pokemon1, pokemon2)

  multiplier = Utils.Solutions.PokemonBattle.multiplier(pokemon1, pokemon2)

  assert attacked_pokemon == %Pokemon{
            pokemon2
            | health: pokemon2.health - pokemon1.attack * multiplier
          }

  PokemonBattle.battle(pokemon1, pokemon2)

  assert {battled_pokemon1, battled_pokemon2} =
            PokemonBattle.battle(pokemon1, pokemon2)

  {expected_battled_pokemon1, expected_battled_pokemon2} =
    Utils.Solutions.PokemonBattle.battle(pokemon1, pokemon2)

  assert battled_pokemon1 == expected_battled_pokemon1
  assert battled_pokemon2 == expected_battled_pokemon2
end)
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
defmodule PokemonBattle do
  #def battle(pokemon1, pokemon2) do
   # cond
      #pokemon1.type == :fire && pokemon2.type == :grass -> ""  #end

  def attack(poke1, poke2) do
    poke2.health - poke1.attack
  end
end

PokemonBattle.attack(charmander, squirtle)d

```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish pokemon battle exercise"
```

## Up Next

| Previous                                         | Next                                                                                     |
| ------------------------------------------------ | ---------------------------------------------------------------------------------------: |
| [Rpg Dialogue](../exercises/rpg_dialogue.livemd) | [Rock Paper Scissors Lizard Spock](../exercises/rock_paper_scissors_lizard_spock.livemd) |
