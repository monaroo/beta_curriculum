# Phone Number Parsing

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Phone Number Parsing

You have been provided a large string of phone numbers. The problem is, each phone number does
not follow a standard format.

You have been asked to convert them from the non standardized format into a standard format.

Phone numbers will be given in the following formats:

* `1231231234`
* `123 123 1234`
* `(123)-123-1234`
* `(123) 123 1234`
* `(123)123-1234`

You need to convert them into the format `123-123-1234`.

<!-- livebook:{"force_markdown":true} -->

```elixir
text = "
1231231234
123 123 1234
(123)-123-1234
(123) 123 1234
(123)123-1234
"
PhoneNumber.parse(text)
"
123-123-1234
123-123-1234
123-123-1234
123-123-1234
123-123-1234
"
```

<!-- livebook:{"break_markdown":true} -->

Enter your answer below.

```elixir
def condline(string) do
  numbersonly = ~r/(\d{3})(\d{3})(\d{4})/
  spaces = ~r/(\d{3})\s(\d{3})\s(\d{4})/
  paren2dash = ~r/\((\d{3})\)(\-)(\d{3})(\-)(\d{4})/
  parenspace = ~r/\((\d{3})\)\s(\d{3})\s(\d{4})/
  paren1dash = ~r/\((\d{3})\)(\d{3})\s(\d{4})/

  cond do
    Regex.match?(numbersonly, string) ->
      Regex.replace(numbersonly, string, fn _, a, b, c ->
        a <> "-" <> b <> "-" <> c
      end)

    Regex.match?(spaces, string) ->
      Regex.replace(spaces, string, fn _, a, c, e ->
        a <> "-" <> c <> "-" <> e
      end)

    Regex.match?(paren2dash, string) ->
      Regex.replace(paren2dash, string, fn _, b, d, e, f, g ->
        b <> d <> e <> f <> g
      end)

    Regex.match?(parenspace, string) ->
      Regex.replace(parenspace, string, fn _, b, e, g ->
        b <> "-" <> e <> "-" <> g
      end)

    Regex.scan(paren1dash, string) ->
      Regex.replace(paren1dash, string, fn _, b, d, f ->
        b <> "-" <> d <> "-" <> f
      end)
  end
end

def each(list) do
  Enum.each(list, condline(string))
end

def jam(list) do
  Enum.join(list)
end

string
|> PhoneNumber.split()
|> PhoneNumber.each()
|> PhoneNumber.jam()
```

```elixir
defmodule PhoneNumber do
  def split(string) do
    String.split(string, "\n")
  end

  def condline(string) do
    numbersonly = ~r/(\d{3})(\d{3})(\d{4})/
    spaces = ~r/(\d{3})\s(\d{3})\s(\d{4})/
    paren2dash = ~r/\((\d{3})\)(\-)(\d{3})(\-)(\d{4})/
    parenspace = ~r/\((\d{3})\)\s(\d{3})\s(\d{4})/
    paren1dash = ~r/\((\d{3})\)(\d{3})\-(\d{4})/

    cond do
      Regex.match?(numbersonly, string) ->
        Regex.replace(numbersonly, string, fn _, a, b, c ->
          a <> "-" <> b <> "-" <> c
        end)

      Regex.match?(spaces, string) ->
        Regex.replace(spaces, string, fn _, a, c, e ->
          a <> "-" <> c <> "-" <> e
        end)

      Regex.match?(paren2dash, string) ->
        Regex.replace(paren2dash, string, fn _, b, d, e, f, g ->
          b <> d <> e <> f <> g
        end)

      Regex.match?(parenspace, string) ->
        Regex.replace(parenspace, string, fn _, b, e, g ->
          b <> "-" <> e <> "-" <> g
        end)

      Regex.scan(paren1dash, string) ->
        Regex.replace(paren1dash, string, fn _, b, d, f ->
          b <> "-" <> d <> "-" <> f
        end)
    end
  end

  def each(list) do
    Enum.map(list, fn string -> condline(string) end)
  end

  def jam(list) do
    Enum.join(list, "\n")
  end

  def parse(string) do
    string
    |> PhoneNumber.split()
    |> PhoneNumber.each()
    |> PhoneNumber.jam()
  end
end

Utils.feedback(:phone_number_parsing, PhoneNumber)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish phone number parsing exercise"
```

## Up Next

| Previous                                                 | Next                                         |
| -------------------------------------------------------- | -------------------------------------------: |
| [Email Validation](../exercises/email_validation.livemd) | [Classified](../exercises/classified.livemd) |
