# Math

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Math

In this exercise, you're going to create a `Math` module that handles adding, subtracting, and multiplying different
data types.

You might consider relying on either **guards**, **protocols**, or **behaviours** to accomplish the desired functionality.

The `Math` module should be able to `add/2`, `subtract/2`, and `multiply/2` **integer**, **float**, **string**, **list**, and **ranges**.

### Integers and Floats

Integers and floats should work as expected with the `+`, `*`, and `-` operators.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(1, 1)
2

Math.add(1, 2.5)
3.5

Math.subtract(3, 1)
2

Math.multiply(5, 5)
25
```

<!-- livebook:{"break_markdown":true} -->

### Lists

Lists should work the same as with the `++` and `--` operators. Multiplication should use an integer for the second
argument and repeat elements in the list. (You may find the [List.duplicate/2](https://hexdocs.pm/elixir/List.html#duplicate/2) and [List.flatten/1](https://hexdocs.pm/elixir/List.html#flatten/1) functions to be useful)

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add([1,2], [3,4])
[1,2,3,4]

Math.subtract([1,2,3], [2, 3])
[1]

Math.multiply([1,2,3], 3)
[1,2,3, 1,2,3, 1,2,3]
```

<!-- livebook:{"break_markdown":true} -->

### Ranges

Ranges should perform the operation on the start and the end of each list.

Remember that you can pattern match on a range like so:

```elixir
first..last//step = 1..10
{first, last, step}
```

```elixir
first..last//step = 2..20//3
{first, last, step}
```

You do not need to take the range step into account. i.e. `1..10//2`

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(1..10, 2..20)
3..30
Math.subtract(5..20, 2..5)
3..15
Math.multiply(5..20, 1..5)
5..100
```

<!-- livebook:{"break_markdown":true} -->

### Strings

* `add/2` should work the same as the `<>` operator.
* `subtract/2` should remove the first matching letter from the string.
* `multiply/2` should repeat the second string after every letter in the first string.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add("he", "llo")
"hello"

Math.subtract("here", "he")
"re"

Math.subtract("here", "hee")
"r"

Math.multiply("123", "abc")
"1abc2abc3abc"
```

### Your Solution

Enter your solution below between the comments. Ensure you create a `Math` module or protocol.

```elixir
# Enter your answer below
defprotocol Math do
  def add(value1, value2)
  def subtract(value1, value2)
  def multiply(value1, value2)
end

# int float string list range
defimpl Math, for: Integer do
  def add(int1, int2) do
    int1 + int2
  end

  def subtract(int1, int2) do
    int1 - int2
  end

  def multiply(int1, int2) do
    int1 * int2
  end
end

defimpl Math, for: Float do
  def add(fl1, fl2) do
    fl1 + fl2
  end

  def subtract(fl1, fl2) do
    fl1 - fl2
  end

  def multiply(fl1, fl2) do
    fl1 * fl2
  end
end

defimpl Math, for: BitString do
  def add(st1, st2) do
    st1 <> st2
  end

  def subtract(st1, st2) do
    String.replace(st1, st2, "")
  end

  def multiply(st1, st2) do
    split = String.split(st1, "", trim: true)

    split
    |> Enum.map(fn each -> each <> st2 end)
    |> List.to_string()
  end
end

defimpl Math, for: List do
  def add(list1, list2) do
    list1 ++ list2
  end

  def subtract(list1, list2) do
    list1 -- list2
  end

  def multiply(list1, list2) do
    list1
    |> List.duplicate(list2)
    |> List.flatten()
  end
end

defimpl Math, for: Range do
  def add(first1..last1, first2..last2) do
    (first1 + first2)..(last1 + last2)
  end

  def subtract(first1..last1, first2..last2) do
    (first1 - first2)..(last1 - last2)
  end

  def multiply(first1..last1, first2..last2) do
    (first1 * first2)..(last1 * last2)
  end
end

# Enter your answer above
Utils.feedback(:math_module, Math)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish math exercise"
```

## Up Next

| Previous                                                   | Next                                         |
| ---------------------------------------------------------- | -------------------------------------------: |
| [Pokemon Protocols](../exercises/pokemon_protocols.livemd) | [Battle Map](../exercises/battle_map.livemd) |
