# Guessing Games

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Guess the Word

In the Elixir cell below create a word guessing game.

* Bind a variable `guess` to the player's guess as a string.
* Bind a variable `answer` to the actual answer as a string.
* Check that the `guess` matches the answer. Bind `correct` to `"Correct!"`
  if the answer and guess match or `"Incorrect."` if they don't.

Run the code with a correct and incorrect `guess` to ensure
your code passes the tests.

```elixir
guess = "popcorn"
answer = "pizza"

correct = "Correct!"
incorrect = "Incorrect."

# guess not answer 
# guess = incorrect
# guess = correct

correct =
  if guess == answer do
    "Correct!"
  else
    "Incorrect."
  end
```

```elixir
guess = "popcorn"
answer = "pizza"

correct = "Correct!"
incorrect = "Incorrect."

if guess(not answer) do
  guess = incorrect
else
  guess = correct
end
```

<!-- livebook:{"attrs":{"assertions":"assert Enum.all?([guess, answer, correct], &is_binary/1),\n  \"Ensure `guess`, `answer`, and `correct` are all strings\"\n\nif guess == answer do\n  assert correct == \"Correct!\"\nelse\n  assert correct == \"Incorrect.\"\nend","attempts":1,"code":"guess = nil\nanswer = nil\n\ncorrect = nilnil","solution":"correct = if guess == answer, do: \"Correct!\", else: \"Incorrect.\"","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      guess = nil
      answer = nil

      correct = nilnil

      assert Enum.all?([guess, answer, correct], &is_binary/1),
             "Ensure `guess`, `answer`, and `correct` are all strings"

      if guess == answer do
        assert correct == "Correct!"
      else
        assert correct == "Incorrect."
      end
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
guess = nil
answer = nil

correct = nilnil
```

## Guess the Number

In the Elixir cell below create a number guessing game.

* Bind a variable `guess` to the player's guess as an integer.
* Bind a variable `answer` to the actual answer as an integer.
* If `guess` equals `answer` bind `correct` to `"Correct!"`
* If `guess` is less than `answer` bind `correct` to `"Too low!"`
* If `guess` is greater than `answer` bind `correct` to `"Too high!"`

Run your code with an equal, smaller, and larger `guess` than the `answer` to ensure your
code passes all tests.

```elixir
guess = 12
answer = 12

cond do
  guess > answer ->
    "too high!"

  guess < answer ->
    "too low!"

  guess == answer ->
    "correct!"
end
```

<!-- livebook:{"attrs":{"assertions":"assert is_integer(guess), \"Ensure `guess` is an integer\"\nassert is_integer(answer), \"Ensure `answer` is an integer\"\nassert is_binary(correct), \"Ensure `correct` is a string\"\n\ncond do\n  guess == answer -> assert correct == \"Correct!\"\n  guess < answer -> assert correct == \"Too low!\"\n  guess > answer -> assert correct == \"Too high!\"\nend","code":"guess = nil\r\nanswer = nil\r\n\r\ncorrect = nil","solution":"correct =\n  cond do\n    guess == answer -> \"Correct!\"\n    guess < answer -> \"Too low!\"\n    guess > answer -> \"Too high!\"\n  end"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      guess = nil
      answer = nil

      correct = nil
      assert is_integer(guess), "Ensure `guess` is an integer"
      assert is_integer(answer), "Ensure `answer` is an integer"
      assert is_binary(correct), "Ensure `correct` is a string"

      cond do
        guess == answer -> assert correct == "Correct!"
        guess < answer -> assert correct == "Too low!"
        guess > answer -> assert correct == "Too high!"
      end
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
guess = nil
answer = nil

correct = nil
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish guessing games exercise"
```

## Up Next

| Previous                                                   | Next                                                           |
| ---------------------------------------------------------- | -------------------------------------------------------------: |
| [Boolean Operators](../exercises/boolean_operators.livemd) | [Rock Paper Scissors](../exercises/rock_paper_scissors.livemd) |
