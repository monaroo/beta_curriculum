# Shopping List

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Text Shopping List

You are creating a shopping list app. Users have the ability to add items into their `shopping_cart`.
Each item is represented as a string.

In the Elixir cells below, use `++` and `--` to add the items show.

* Add `"grapes"`, `"walnuts"`, and `"apples"` to the `shopping_cart`
* Add `"blueberries"`, `"chocolate"`, and `"pizza"` to the `shopping_cart`.
* Remove `"grapes"` and `"walnuts"` from the `shopping_cart`
* Add three `"banana"`s to the `shopping_cart`

<!-- livebook:{"attrs":{"assertions":"list = [] ++ [\"grapes\", \"walnuts\", \"apples\"]\nlist = list ++ [\"blueberries\", \"chocolate\", \"pizza\"]\nlist = list -- [\"grapes\", \"walnuts\"]\nlist = list ++ [\"banana\", \"banana\", \"banana\"]\n\nassert is_list(shopping_cart), \"Ensure shopping_list is still a list.\"\n\nassert Enum.sort(list) == Enum.sort(shopping_cart),\n  \"Ensure your shopping list has all of the expected items\"\n\nassert shopping_cart == list, \"Ensure you add and remove items in the expected order\"","attempts":7,"code":"#shopping_cart = [\"grapes\", \"walnuts\", \"apples\"] ++ [\"blueberries\", \"chocolate\", \"pizza\"] -- [\"grapes\", \"walnuts\"] \n#shopping_cart = shopping_cart ++ [\"banana\", \"banana\", \"banana\"]\n\nshopping_cart = []\n\nshopping_cart = shopping_cart ++ ~w[grapes walnuts apples]\nshopping_cart = shopping_cart ++ ~w[blueberries chocolate pizza]\nshopping_cart = shopping_cart -- ~w[grapes walnuts]\nshopping_cart = shopping_cart ++ ~w[banana banana banana]","solution":"shopping_cart = []\n\nshopping_cart = shopping_cart ++ ~w[grapes walnuts apples]\nshopping_cart = shopping_cart ++ ~w[blueberries chocolate pizza]\nshopping_cart = shopping_cart -- ~w[grapes walnuts]\nshopping_cart = shopping_cart ++ ~w[banana banana banana]","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)

      # shopping_cart = ["grapes", "walnuts", "apples"] ++ ["blueberries", "chocolate", "pizza"] -- ["grapes", "walnuts"] 
      # shopping_cart = shopping_cart ++ ["banana", "banana", "banana"]

      shopping_cart = []

      shopping_cart = shopping_cart ++ ~w[grapes walnuts apples]
      shopping_cart = shopping_cart ++ ~w[blueberries chocolate pizza]
      shopping_cart = shopping_cart -- ~w[grapes walnuts]
      shopping_cart = shopping_cart ++ ~w[banana banana banana]
      list = [] ++ ["grapes", "walnuts", "apples"]
      list = list ++ ["blueberries", "chocolate", "pizza"]
      list = list -- ["grapes", "walnuts"]
      list = list ++ ["banana", "banana", "banana"]

      assert is_list(shopping_cart), "Ensure shopping_list is still a list."

      assert Enum.sort(list) == Enum.sort(shopping_cart),
             "Ensure your shopping list has all of the expected items"

      assert shopping_cart == list, "Ensure you add and remove items in the expected order"
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
# shopping_cart = ["grapes", "walnuts", "apples"] ++ ["blueberries", "chocolate", "pizza"] -- ["grapes", "walnuts"] 
# shopping_cart = shopping_cart ++ ["banana", "banana", "banana"]

shopping_cart = []

shopping_cart = shopping_cart ++ ~w[grapes walnuts apples]
shopping_cart = shopping_cart ++ ~w[blueberries chocolate pizza]
shopping_cart = shopping_cart -- ~w[grapes walnuts]
shopping_cart = shopping_cart ++ ~w[banana banana banana]
```

## Text Shopping List With Quantities

Users of your shopping list app have asked that they be able to include the quantity of each item
to make adding many items easier.

In the Elixir cell below, use a keyword list in the format `[item: quantity]` to add or remove
items from the `shopping_cart`

* Add `1` `milk` and `12` `eggs`
* Add `2` `bars_of_butter` and `10` `candies`
* Remove `2` `bars_of_butter`
* Remove `5` `candies` (Notice `5` and not `10`!).
  <details>
  <summary>Hint</summary>
  Likely you will need to remove 10 candies, and then add 5 candies.
  </details>

<!-- livebook:{"attrs":{"assertions":"list = [] ++ [milk: 1, eggs: 12]\nlist = list ++ [bars_of_butter: 2, candies: 10]\nlist = list -- [bars_of_butter: 2]\nlist = list -- [candies: 10]\nlist = list ++ [candies: 5]\n\nassert is_list(shopping_cart), \"Ensure shopping_list is still a list.\"\n\nassert Enum.sort(list) == Enum.sort(shopping_cart),\n  \"Ensure your shopping list has all of the expected items\"\n\nassert shopping_cart == list, \"Ensure you add and remove items in the expected order\"","attempts":5,"code":"shopping_cart = []\nshopping_cart = shopping_cart ++ [milk: 1, eggs: 12]\nshopping_cart = shopping_cart ++ [bars_of_butter: 2, candies: 10]\nshopping_cart = shopping_cart -- [bars_of_butter: 2]\nshopping_cart = shopping_cart ++ [candies: 5]\nshopping_cart = shopping_cart -- [candies: 10]\n\n\n  1) test Exercise (Assertion)\n     beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:6\n     Ensure your shopping list has all of the expected items\n     stacktrace:\n       beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:22: (test)\n\n\nFinished in 0.01 seconds (0.00s async, 0.01s sync)\n1 test, 1 failure\n\nRandomized with seed 518532\n\n\n  1) test Exercise (Assertion)\n     beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:6\n     Ensure your shopping list has all of the expected items\n     stacktrace:\n       beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:22: (test)\n\n\nFinished in 0.01 seconds (0.00s async, 0.01s sync)\n1 test, 1 failure\n\nRandomized with seed 518532\n","solution":"shopping_cart = []\n\nshopping_cart = shopping_cart ++ [milk: 1, eggs: 12]\nshopping_cart = shopping_cart ++ [bars_of_butter: 2, candies: 10]\nshopping_cart = shopping_cart -- [bars_of_butter: 2]\nshopping_cart = shopping_cart -- [candies: 10]\nshopping_cart = shopping_cart ++ [candies: 5]","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      shopping_cart = []
shopping_cart = shopping_cart ++ [milk: 1, eggs: 12]
shopping_cart = shopping_cart ++ [bars_of_butter: 2, candies: 10]
shopping_cart = shopping_cart -- [bars_of_butter: 2]
shopping_cart = shopping_cart ++ [candies: 5]
shopping_cart = shopping_cart -- [candies: 10]


  1) test Exercise (Assertion)
     beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:6
     Ensure your shopping list has all of the expected items
     stacktrace:
       beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:22: (test)


Finished in 0.01 seconds (0.00s async, 0.01s sync)
1 test, 1 failure

Randomized with seed 518532


  1) test Exercise (Assertion)
     beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:6
     Ensure your shopping list has all of the expected items
     stacktrace:
       beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:22: (test)


Finished in 0.01 seconds (0.00s async, 0.01s sync)
1 test, 1 failure

Randomized with seed 518532

      list = [] ++ [milk: 1, eggs: 12]
list = list ++ [bars_of_butter: 2, candies: 10]
list = list -- [bars_of_butter: 2]
list = list -- [candies: 10]
list = list ++ [candies: 5]

assert is_list(shopping_cart), "Ensure shopping_list is still a list."

assert Enum.sort(list) == Enum.sort(shopping_cart),
  "Ensure your shopping list has all of the expected items"

assert shopping_cart == list, "Ensure you add and remove items in the expected order"
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
shopping_cart = []
shopping_cart = shopping_cart ++ [milk: 1, eggs: 12]
shopping_cart = shopping_cart ++ [bars_of_butter: 2, candies: 10]
shopping_cart = shopping_cart -- [bars_of_butter: 2]
shopping_cart = shopping_cart ++ [candies: 5]
shopping_cart = shopping_cart -- [candies: 10]


  1) test Exercise (Assertion)
     beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:6
     Ensure your shopping list has all of the expected items
     stacktrace:
       beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:22: (test)


Finished in 0.01 seconds (0.00s async, 0.01s sync)
1 test, 1 failure

Randomized with seed 518532


  1) test Exercise (Assertion)
     beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:6
     Ensure your shopping list has all of the expected items
     stacktrace:
       beta_curriculum/untitled folder/beta_curriculum/exercises/shopping_list.livemd#cell:22: (test)


Finished in 0.01 seconds (0.00s async, 0.01s sync)
1 test, 1 failure

Randomized with seed 518532


```

```elixir
shopping_cart = []
shopping_cart = shopping_cart ++ [milk: 1, eggs: 12]
shopping_cart = shopping_cart ++ [bars_of_butter: 2, candies: 10]
shopping_cart = shopping_cart -- [bars_of_butter: 2]
shopping_cart = shopping_cart ++ [candies: 5]
shopping_cart = shopping_cart -- [candies: 10]
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish shopping list exercise"
```

## Up Next

| Previous                       | Next                                           |
| ------------------------------ | ---------------------------------------------: |
| [Maps](../reading/maps.livemd) | [Family Tree](../exercises/family_tree.livemd) |
