# Creature Spawner

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Creature Spawner

Many video games contain **Spawners** which spawn enemy creatures.

Typically, the spawner has a limit for how many enemy creatures it spawns. If
a creature dies, the spawner then re-spawns that creature.

Sound familiar? We can leverage supervisors to create this effect.

Create three `Creature` processes. A creature process should store
it's health in state, and you should be able to send a message to damage the creature like so.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, creature} = Creature1.start_link([])
%{health: 100} = :sys.get_state(creature)
Creature1.damage(creature, 10)
%{health: 90} = :sys.get_state(creature)
```

When the creature's health reaches `0`, it should die (crash).
When it crashes, the supervisor should restart the creature process.

```mermaid
flowchart
  S[Spawner]
  C1[Creature1]
  C2[Creature2]
  C3[Creature3]

  S --> C1
  S --> C2
  S --> C3
```

Enter your solution below.

```elixir
defmodule Creature do
  use GenServer

  def start_link(opts) do
    GenServer.start_link(__MODULE__, %{health: 100}, opts)
  end

  def init(state) do
    {:ok, %{health: 100}}
  end

  def damage(pid, damage) do
    GenServer.call(pid, {:damage, damage})
  end

  def handle_call({:damage, damage}, _from, state) do
    new_state = %{state | health: state.health - damage}

    if new_state.health == 0 do
      raise "DED"
    end

    {:reply, :ok, new_state}
  end
end

# start the creatures under a supervisor below:
children = [
  Supervisor.child_spec({Creature, [name: :Creature1]}, id: :creature1),
  Supervisor.child_spec({Creature, [name: :Creature2]}, id: :creature2),
  Supervisor.child_spec({Creature, [name: :Creature3]}, id: :creature3)
]

{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
```

```elixir
Supervisor.which_children(pid)
```

```elixir
Supervisor.which_children(pid)
|> List.first()
|> elem(1)
|> Creature.damage(90)
```

### Bonus: Hero

You may add a `Hero` process supervised by the supervisor above.
The `Hero` process should automatically damage the three `Creature` processes on
an interval (i.e. 5 seconds)

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish creature spawner exercise"
```

## Up Next

| Previous                                 | Next                                           |
| ---------------------------------------- | ---------------------------------------------: |
| [Dominoes](../exercises/dominoes.livemd) | [Typing Game](../exercises/typing_game.livemd) |
