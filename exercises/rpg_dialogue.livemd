# RPG Dialogue

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Overview

In this exercise, you're going to generate dialogue for an RPG (Role Playing Game).
This lesson is designed to provide you an opportunity to practice structs and control flow.

### Create A Character Struct

In the Elixir cell below, define a `Character` struct with a `:name`, `:class`, and `:weapon`.
Enforce that the `:name` property exists.

```elixir
defmodule Character do
  defstruct [:name, :class, :weapon]

  # end

  # defmodule Hero do 
  def introduce(character) do
    "I am #{character.name} the #{character.class}. Bow to my #{character.weapon}!"
  end
end

arthur = %Character{name: "Arthur", class: "Warrior", weapon: "Sword"}
gandalf = %Character{name: "Gandalf", class: "Wizard", weapon: "Staff"}
jarlaxle = %Character{name: "Jarlaxle", class: "Rogue", weapon: "Daggers"}
mabel = %Character{name: "Mabel", class: "girl", weapon: "Grappling Hook"}

# arthur = %Character{name: "Arthur", class: "Warrior", weapon: "Sword"}
Character.introduce(mabel)
```

<!-- livebook:{"attrs":{"assertions":"assert Keyword.get(Character.__info__(:functions), :__struct__),\n  \"Ensure you use `defstruct`\"\n\nassert match?(%{name: nil, class: nil, weapon: nil}, struct(Character)),\n  \"Ensure you use `defstruct` with :name, :class, and :weapon\"\n\nassert_raise ArgumentError, fn ->\n  struct!(Character, %{weapon: \"\", class: \"\"})\nend","attempts":3,"code":"defmodule Character do\n  defstruct wizard [:name, :class, :weapon]\n    \r  end\n\nend","solution":"defmodule Character do\n  @enforce_keys :name\n  defstruct [:name, :class, :weapon]\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      defmodule Character do
  defstruct wizard [:name, :class, :weapon]
      end

end
      assert Keyword.get(Character.__info__(:functions), :__struct__),
  "Ensure you use `defstruct`"

assert match?(%{name: nil, class: nil, weapon: nil}, struct(Character)),
  "Ensure you use `defstruct` with :name, :class, and :weapon"

assert_raise ArgumentError, fn ->
  struct!(Character, %{weapon: "", class: ""})
end
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
defmodule Character do
  defstruct wizard [:name, :class, :weapon]
      end

end

```

Create character structs with the following information:

```mermaid
classDiagram
  class Arthur {
    class: "warrior"
    weapon: "sword"
  }
  class Gandalf {
    class: "wizard"
    weapon: "staff"
  }
  class Jarlaxle {
    class: "rogue"
    weapon: "daggers"
  }
```

Replace `nil` with each struct.

```elixir
arthur = %Character{name: "Arthur", class: "Warrior", weapon: "Sword"}
enemy = "Mordred"
gandalf = %Character{name: "Gandalf", class: "Wizard", weapon: "Staff"}
jarlaxle = %Character{name: "Jarlaxle", class: "Rogue", weapon: "Daggers"}
```

<!-- livebook:{"attrs":{"assertions":"assert is_struct(arthur), \"Ensure `arthur` is a struct.\"\nassert is_struct(gandalf), \"Ensure `gandalf` is a struct.\"\nassert is_struct(jarlaxle), \"Ensure `jarlaxle` is a struct.\"\n\nassert %{name: \"Arthur\", weapon: \"sword\", class: \"warrior\"} = arthur\nassert %{name: \"Gandalf\", weapon: \"staff\", class: \"wizard\"} = gandalf\nassert %{name: \"Jarlaxle\", weapon: \"daggers\", class: \"rogue\"} = jarlaxle","attempts":3,"code":"arthur = %Character{name: \"Arthur\", class: \"Warrior\", weapon: \"Sword\"}\n  gandalf = %Character{name: \"Gandalf\", class: \"Wizard\", weapon: \"Staff\"}\n  jarlaxle = %Character{name: \"Jarlaxle\", class: \"Rogue\", weapon: \"Daggers\"}il","solution":"arthur = %Character{name: \"Arthur\", class: \"warrior\", weapon: \"sword\"}\ngandalf = %Character{name: \"Gandalf\", class: \"wizard\", weapon: \"staff\"}\njarlaxle = %Character{name: \"Jarlaxle\", class: \"rogue\", weapon: \"daggers\"}","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      arthur = %Character{name: "Arthur", class: "Warrior", weapon: "Sword"}
  gandalf = %Character{name: "Gandalf", class: "Wizard", weapon: "Staff"}
  jarlaxle = %Character{name: "Jarlaxle", class: "Rogue", weapon: "Daggers"}il
      assert is_struct(arthur), "Ensure `arthur` is a struct."
assert is_struct(gandalf), "Ensure `gandalf` is a struct."
assert is_struct(jarlaxle), "Ensure `jarlaxle` is a struct."

assert %{name: "Arthur", weapon: "sword", class: "warrior"} = arthur
assert %{name: "Gandalf", weapon: "staff", class: "wizard"} = gandalf
assert %{name: "Jarlaxle", weapon: "daggers", class: "rogue"} = jarlaxle
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
arthur = %Character{name: "Arthur", class: "Warrior", weapon: "Sword"}
  gandalf = %Character{name: "Gandalf", class: "Wizard", weapon: "Staff"}
  jarlaxle = %Character{name: "Jarlaxle", class: "Rogue", weapon: "Daggers"}il

```

### Create A Dialogue Module

In the Elixir cell below.

* Create a `Dialogue.greet/1` function which accepts a character struct and returns the following dialogue.

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Peter"}
Dialogue.greet(character)
"Hello, my name is Peter."
```

* Create a `Dialogue.attack/2` function which accepts a character and returns the following dialogue.

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Arthur", weapon: "sword"}
enemy = "Mordred"

Dialogue.attack(character, enemy)
"Arthur attacks Mordred with a sword."
```

<!-- livebook:{"break_markdown":true} -->

* Create a `Dialogue.relinquish_weapon/1` function which returns different dialogue depending on the character's class.
  * `"rogue"`: `"Fine, have my #{character.weapon}. I have more hidden anyway."`
  * `"wizard"`: `"You would not part an old man from his walking stick?"`
  * `"warrior"`: `"Have my #{character.weapon} then!"`
  * any other class: `"My precious!"`

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Vax", class: "rogue", weapon: "daggers"}

Dialogue.relinquish_weapon(character)
"Fine, have my daggers. I have more hidden anyway."
```

<!-- livebook:{"break_markdown":true} -->

* Create a function `Dialogue.matching_weapon/1` that returns different dialogue depending on
  the character's class and weapon.
  * `"wizard"` and `"staff"`: `"My lovely magical staff."`
  * `"rogue"` and `"daggers"`: `"Hidden and deadly."`
  * `"warrior"` and `"sword"`: `"My noble sword!"`
  * any class and no weapon (`nil`): `"I'm unarmed!"`
  * any other combination: `"I'm not sure a #{character.weapon} suits a #{character.class}."`

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Vax", class: "rogue", weapon: "daggers"}
Dialogue.matching_weapon(character)
"Hidden and deadly."

character = %Character{name: "Taako", class: "wizard", weapon: "mace"}
Dialogue.matching_weapon(character)
"I'm not sure a mace suits a wizard."
```

```elixir
defmodule Dialogue do
  def greet(character) do
    "hello, my name is #{character.name}"
  end

  def attack(character, enemy) do
    "#{character.name} attacks #{enemy} with his #{character.weapon}."
  end

  def relinquish_weapon(character) do
    "Fine, take my #{character.weapon}. I have more hidden anyway."
  end

  def matching_weapon(character) do
    cond do
      character.class == "Wizard" && character.weapon == "Staff" -> "My lovely magical staff."
      character.class == "Warrior" && character.weapon == "Sword" -> "My noble sword."
      character.class == "Rogue" && character.weapon == "Daggers" -> "Hidden but deadly."
      character.weapon == nil -> "I'm unarmed!"
      :else -> "My Precious!"
    end
  end
end

Dialogue.greet(gandalf)
Dialogue.attack(gandalf, enemy)
Dialogue.relinquish_weapon(jarlaxle)
IO.inspect(gandalf, label: "gandalf")
Dialogue.matching_weapon(gandalf)
```

<!-- livebook:{"attrs":{"assertions":"character_permutations =\n  for class <- [\"wizard\", \"rogue\", \"warrior\", nil],\n      weapon <- [\"daggers\", \"sword\", \"staff\", nil],\n      name <- [Utils.Factory.name(), nil] do\n    %{class: class, weapon: weapon, name: name}\n  end\n\nenemy = Utils.Factory.name()\n\nEnum.each(character_permutations, fn character ->\n  assert Dialogue.greet(character) == \"Hello, my name is #{character.name}.\"\n\n  assert Dialogue.attack(character, enemy) ==\n    \"#{character.name} attacks #{enemy} with a #{character.weapon}.\"\n\n  relinquish_weapon_dialogue =\n    case character.class do\n      \"rogue\" -> \"Fine, have my #{character.weapon}. I have more hidden anyway.\"\n      \"wizard\" -> \"You would not part an old man from his walking stick?\"\n      \"warrior\" -> \"Have my #{character.weapon} then!\"\n      _ -> \"My precious!\"\n    end\n\n  assert Dialogue.relinquish_weapon(character) == relinquish_weapon_dialogue\n\n  matching_weapon_dialogue =\n    case {character.class, character.weapon} do\n      {\"wizard\", \"staff\"} -> \"My lovely magical staff.\"\n      {\"rogue\", \"daggers\"} -> \"Hidden and deadly.\"\n      {\"warrior\", \"sword\"} -> \"My noble sword!\"\n      {_, nil} -> \"I'm unarmed!\"\n      {_, _} -> \"I'm not sure a #{character.weapon} suits a #{character.class}.\"\n    end\n\n  assert Dialogue.matching_weapon(character) == matching_weapon_dialogue\nend)","attempts":1,"code":"defmodule Dialogue do\r\n  def greet(character) d\n    \"hello, my name is #{character.name}\"o\r\n  end\r\n\r\n  def attack(character, enemy\n    ) do\r\n  end\r\n\r\n  def relinquish_weapon(character) do\r\n  end\r\n\r\n  def matching_weapon(character) do\nDialogue.greet(gandalf)\r\n  end\r\nend","solution":"defmodule Dialogue do\n  def greet(character) do\n    \"Hello, my name is #{character.name}.\"\n  end\n\n  def attack(character, enemy) do\n    \"#{character.name} attacks #{enemy} with a #{character.weapon}.\"\n  end\n\n  def relinquish_weapon(character) do\n    case character.class do\n      \"warrior\" -> \"Have my #{character.weapon} then!\"\n      \"wizard\" -> \"You would not part an old man from his walking stick?\"\n      \"rogue\" -> \"Fine, have my #{character.weapon}. I have more hidden anyway.\"\n      _ -> \"My precious!\"\n    end\n  end\n\n  def matching_weapon(character) do\n    case {character.class, character.weapon} do\n      {\"wizard\", \"staff\"} -> \"My lovely magical staff.\"\n      {\"rogue\", \"daggers\"} -> \"Hidden and deadly.\"\n      {\"warrior\", \"sword\"} -> \"My noble sword!\"\n      {_, nil} -> \"I'm unarmed!\"\n      {_, _} -> \"I'm not sure a #{character.weapon} suits a #{character.class}.\"\n    end\n  end\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      defmodule Dialogue do
  def greet(character) d
    "hello, my name is #{character.name}"o
  end

  def attack(character, enemy
    ) do
  end

  def relinquish_weapon(character) do
  end

  def matching_weapon(character) do
Dialogue.greet(gandalf)
  end
end
      character_permutations =
  for class <- ["wizard", "rogue", "warrior", nil],
      weapon <- ["daggers", "sword", "staff", nil],
      name <- [Utils.Factory.name(), nil] do
    %{class: class, weapon: weapon, name: name}
  end

enemy = Utils.Factory.name()

Enum.each(character_permutations, fn character ->
  assert Dialogue.greet(character) == "Hello, my name is #{character.name}."

  assert Dialogue.attack(character, enemy) ==
    "#{character.name} attacks #{enemy} with a #{character.weapon}."

  relinquish_weapon_dialogue =
    case character.class do
      "rogue" -> "Fine, have my #{character.weapon}. I have more hidden anyway."
      "wizard" -> "You would not part an old man from his walking stick?"
      "warrior" -> "Have my #{character.weapon} then!"
      _ -> "My precious!"
    end

  assert Dialogue.relinquish_weapon(character) == relinquish_weapon_dialogue

  matching_weapon_dialogue =
    case {character.class, character.weapon} do
      {"wizard", "staff"} -> "My lovely magical staff."
      {"rogue", "daggers"} -> "Hidden and deadly."
      {"warrior", "sword"} -> "My noble sword!"
      {_, nil} -> "I'm unarmed!"
      {_, _} -> "I'm not sure a #{character.weapon} suits a #{character.class}."
    end

  assert Dialogue.matching_weapon(character) == matching_weapon_dialogue
end)
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
defmodule Dialogue do
  def greet(character) d
    "hello, my name is #{character.name}"o
  end

  def attack(character, enemy
    ) do
  end

  def relinquish_weapon(character) do
  end

  def matching_weapon(character) do
Dialogue.greet(gandalf)
  end
end

```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish rpg dialogue exercise"
```

## Up Next

| Previous                                             | Next                                                 |
| ---------------------------------------------------- | ---------------------------------------------------: |
| [Naming Numbers](../exercises/naming_numbers.livemd) | [Pokemon Battle](../exercises/pokemon_battle.livemd) |
