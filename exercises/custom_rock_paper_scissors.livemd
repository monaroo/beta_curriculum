# Rock Paper Scissors

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Custom Rock Paper Scissors

```elixir
m = %{a: 1, b: 2}

# => %{1 => :a, 2 => :b}
# m[1]

m.a
# => 1
m.b
# => 2

m
|> Enum.find(fn {key, val} -> val == 2 end)

inverted =
  m
  |> Enum.map(fn {key, val} -> {val, key} end)
  |> Enum.into(%{})

inverted[2]
```

You're going to create a rock paper scissors game where users can create their own choices.

* Create a `CustomGame` struct.
* Create required keys for `:rock`, `:paper`, `:scissors`.
* Create a `CustomGame.new/3` function that allows users to enter alternate atoms for `:rock`, `:paper`, and `:scissors`.
* Create a `CustomGame.play/3` which expects the return value of `CustomGame.create_game/3` as a parameter.
  The second and third parameter should expect custom atoms the user previously defined.

For example,

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
game = CustomGame.new(:grass, :fire, :water)

CustomGame.play(game, :fire, :water)
"water beats fire"

CustomGame.play(game, :water, :water)
"draw"
```

```elixir
defmodule CustomGame do
  @enforce_keys [:rock, :paper, :scissors]
  defstruct @enforce_keys

  def new(rock, paper, scissors) do
    %CustomGame{rock: rock, paper: paper, scissors: scissors}
  end

  defp convert_choice(%CustomGame{} = custom_game, move) do
    # %{rock: option1, paper: option2, scissors: option3} = custom_game

    inverted =
      custom_game
      |> Map.from_struct()
      |> Enum.map(fn {key, value} -> {value, key} end)

    # %{option1 => :rock}

    inverted[move]
  end

  def play(_custom_game, move, move) do
    "draw"
  end

  def play(custom_game, a, b) do
    classic_a = convert_choice(custom_game, a)
    classic_b = convert_choice(custom_game, b)

    if beats(classic_a, classic_b) do
      "#{a} beats #{b}"
    else
      "#{b} beats #{a}"
    end
  end

  defp beats(a, b) do
    {a, b} in [
      {:rock, :scissors},
      {:scissors, :paper},
      {:paper, :rock}
    ]
  end
end

game = CustomGame.new(:rhino, :monkey, :bear)
CustomGame.play(game, :monkey, :bear)
```

<!-- livebook:{"attrs":{"assertions":"assert 3 == Keyword.get(CustomGame.__info__(:functions), :new),\n        \"Ensure you define the `new/3` function\"\n\nassert Keyword.get(CustomGame.__info__(:functions), :__struct__),\n        \"Ensure you use `defstruct`.\"\n\nassert match?(%{rock: _, paper: _, scissors: _}, struct(CustomGame)),\n        \"Ensure you use `defstruct` with :rock, :paper, and :scissors.\"\n\nassert %{rock: :custom_rock, paper: :custom_paper, scissors: :custom_scissors} =\n          CustomGame.new(:custom_rock, :custom_paper, :custom_scissors)\n\nassert 3 == Keyword.get(CustomGame.__info__(:functions), :play),\n        \"Ensure you define the `play/3` function\"\n\ngame = CustomGame.new(:custom_rock, :custom_paper, :custom_scissors)\n\nbeats? = fn p1, p2 ->\n  {p1, p2} in [\n    {:custom_rock, :custom_scissors},\n    {:custom_paper, :custom_rock},\n    {:custom_scissors, :custom_paper}\n  ]\nend\n\nfor player1 <- [:custom_rock, :custom_paper, :custom_scissors],\n    player2 <- [:custom_rock, :custom_paper, :custom_scissors] do\n  result = CustomGame.play(game, player1, player2)\n\n  expected_result =\n    cond do\n      beats?.(player1, player2) -> \"#{player1} beats #{player2}\"\n      beats?.(player2, player1) -> \"#{player2} beats #{player1}\"\n      true -> \"draw\"\n    end\n\n  assert result == expected_result\nend","attempts":6,"code":"defmodule CustomGame do\n  @enforce_keys [:rock, :paper, :scissors]\n  defstuct @enforce_keys\n\n  def new(rock, paper, scissors) do\n    %{rock: rock, paper: paper, scissors: scissors}\n  end\n\n  def play(_custom_game, a, b) when a == b, do \"draw\"\nend\n\n def play(custom_game, a, b) do\n  classic_a = convert(custom_game, a)\n  classic_b = convert(custom_game, b)\n\n  if \n  beats(classic_a, classic_b) do \n    \"#{a} beats #{b}\"\n else \n   \"#{b} beats #{a}\"\n  end\n\n end\n\n  defp convert(custom_game, a, b) do\n    %{rock: rock, paper: paper, scissors: scissors} = custom_game\n    \n    case choice do\n      rock -> :rock\n      scissors -> :scissors\n      paper -> :paper\n    end\n\n  end\n  \n  defp beats(a, b) do\n{a,b} in [\n  {:rock, :scissors}\n  {:scissors, :paper}\n  {:paper, :rock}\n]\n\n  \n    \r  end\n\nend","solution":"defmodule CustomGame do\n  @enforce_keys [:rock, :paper, :scissors]\n  defstruct @enforce_keys\n\n  def new(rock, paper, scissors) do\n    %CustomGame{rock: rock, paper: paper, scissors: scissors}\n  end\n\n  def play(_custom_game, a, b) when a == b, do: \"draw\"\n\n  def play(custom_game, a, b) do\n    classic_a = convert_choice(custom_game, a)\n    classic_b = convert_choice(custom_game, b)\n\n    if beats?(classic_a, classic_b) do\n      \"#{a} beats #{b}\"\n    else\n      \"#{b} beats #{a}\"\n    end\n  end\n\n  defp convert_choice(custom_game, choice) do\n    %{rock: rock, paper: paper, scissors: scissors} = custom_game\n\n    case choice do\n      ^rock -> :rock\n      ^paper -> :paper\n      ^scissors -> :scissors\n    end\n  end\n\n  defp beats?(a, b) do\n    {a, b} in [\n      {:rock, :scissors},\n      {:scissors, :paper},\n      {:paper, :rock}\n    ]\n  end\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)
      defmodule CustomGame do
  @enforce_keys [:rock, :paper, :scissors]
  defstuct @enforce_keys

  def new(rock, paper, scissors) do
    %{rock: rock, paper: paper, scissors: scissors}
  end

  def play(_custom_game, a, b) when a == b, do "draw"
end

 def play(custom_game, a, b) do
  classic_a = convert(custom_game, a)
  classic_b = convert(custom_game, b)

  if 
  beats(classic_a, classic_b) do 
    "#{a} beats #{b}"
 else 
   "#{b} beats #{a}"
  end

 end

  defp convert(custom_game, a, b) do
    %{rock: rock, paper: paper, scissors: scissors} = custom_game
    
    case choice do
      rock -> :rock
      scissors -> :scissors
      paper -> :paper
    end

  end
  
  defp beats(a, b) do
{a,b} in [
  {:rock, :scissors}
  {:scissors, :paper}
  {:paper, :rock}
]

  
      end

end
      assert 3 == Keyword.get(CustomGame.__info__(:functions), :new),
        "Ensure you define the `new/3` function"

assert Keyword.get(CustomGame.__info__(:functions), :__struct__),
        "Ensure you use `defstruct`."

assert match?(%{rock: _, paper: _, scissors: _}, struct(CustomGame)),
        "Ensure you use `defstruct` with :rock, :paper, and :scissors."

assert %{rock: :custom_rock, paper: :custom_paper, scissors: :custom_scissors} =
          CustomGame.new(:custom_rock, :custom_paper, :custom_scissors)

assert 3 == Keyword.get(CustomGame.__info__(:functions), :play),
        "Ensure you define the `play/3` function"

game = CustomGame.new(:custom_rock, :custom_paper, :custom_scissors)

beats? = fn p1, p2 ->
  {p1, p2} in [
    {:custom_rock, :custom_scissors},
    {:custom_paper, :custom_rock},
    {:custom_scissors, :custom_paper}
  ]
end

for player1 <- [:custom_rock, :custom_paper, :custom_scissors],
    player2 <- [:custom_rock, :custom_paper, :custom_scissors] do
  result = CustomGame.play(game, player1, player2)

  expected_result =
    cond do
      beats?.(player1, player2) -> "#{player1} beats #{player2}"
      beats?.(player2, player1) -> "#{player2} beats #{player1}"
      true -> "draw"
    end

  assert result == expected_result
end
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
          flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)
      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
defmodule CustomGame do
  @enforce_keys [:rock, :paper, :scissors]
  defstuct @enforce_keys

  def new(rock, paper, scissors) do
    %{rock: rock, paper: paper, scissors: scissors}
  end

  def play(_custom_game, a, b) when a == b, do "draw"
end

 def play(custom_game, a, b) do
  classic_a = convert(custom_game, a)
  classic_b = convert(custom_game, b)

  if 
  beats(classic_a, classic_b) do 
    "#{a} beats #{b}"
 else 
   "#{b} beats #{a}"
  end

 end

  defp convert(custom_game, a, b) do
    %{rock: rock, paper: paper, scissors: scissors} = custom_game
    
    case choice do
      rock -> :rock
      scissors -> :scissors
      paper -> :paper
    end

  end
  
  defp beats(a, b) do
{a,b} in [
  {:rock, :scissors}
  {:scissors, :paper}
  {:paper, :rock}
]

  
      end

end

```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish custom rock paper scissors exercise"
```

## Up Next

| Previous                                                                                 | Next                               |
| ---------------------------------------------------------------------------------------- | ---------------------------------: |
| [Rock Paper Scissors Lizard Spock](../exercises/rock_paper_scissors_lizard_spock.livemd) | [Ranges](../reading/ranges.livemd) |
