# Anagram Solver

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Anagram Solver

Two words that contain all the same letters are anagrams.
For example **bored** and **robed** are anagrams.

You are going to create an `AnagramSolver` with a `solve/1` function that accepts a word and
returns every possible permutation of the anagram. Each permutation does not need to be a real word.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
AnagramSolver.solve("cat")
[
  "cat",
  "cta",
  "act",
  "atc",
  "tac",
  "tca"
]
```

You can expect that the number of answers for a word of given length `n` will be `n!`.
So a word with 3 letters has 6 solutions, a word with 4 letters has 24 answers, a word with
5 letters has 120 answers.

Enter your solution in the Elixir cell below,

```elixir
defmodule AnagramSolver do
  def solve(string) when is_binary(string) do
    string
    |> String.to_charlist()
    |> do_solve()
    |> Enum.map(&to_string/1)
  end

  defp do_solve([]) do
    [[]]
  end

  defp do_solve([h]) do
    [[h]]
  end

  defp do_solve(list) do
    for first <- list,
        rest <- do_solve(list -- [first]) do
      [first | rest]
    end
  end
end

AnagramSolver.solve("elixir")
```

### Validate Your Solution

To validate your solution, ensure the following matches the expected output above. The order of anagrams does not matter.

```elixir
AnagramSolver.solve("cat")
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish anagram solver exercise"
```

## Up Next

| Previous                                   | Next                                               |
| ------------------------------------------ | -------------------------------------------------: |
| [Factorial](../exercises/factorial.livemd) | [Big O Notation](../reading/big_o_notation.livemd) |
