# Kitchen Queue

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Kitchen Queue

A FIFO (First In First Out) queue is a common pattern in programming with many applications.

FIFO is also a common term when managing inventory, meaning that older
items should be consumed before newer products.

We're going to apply the concept of a FIFO queue and build a kitchen management game.
Customer requests will be received, and saved in-memory.

<!-- livebook:{"force_markdown":true} -->

```elixir
Kitchen.request("burger with fries")
Kitchen.request("caesar salad")
```

Then the kitchen can prepare the oldest request in the queue.

<!-- livebook:{"force_markdown":true} -->

```elixir
"burger with fries" = Kitchen.prepare()
"caesar salad" = Kitchen.prepare()
```

You might consider using either a named [Agent](https://hexdocs.pm/elixir/Agent.html), `:ets`, or [GenServer](https://hexdocs.pm/elixir/GenServer.html) process to save the queue in-memory.
You may need to start a named process before calling the `Kitchen` module.

```elixir
defmodule Kitchen do
  use Agent

  def start_link() do
    Agent.start_link(fn -> [] end, name: :newqueue)
  end

  def request(item) do
    Agent.update(:newqueue, fn queue -> List.insert_at(queue, 0, item) end)
  end

  def prepare() do
    item = Agent.get(:newqueue, fn queue -> List.last(queue) end)
    Agent.update(:newqueue, fn queue -> List.delete(queue, item) end)
    item
  end
end

Kitchen.start_link()
```

Test your solution by uncommenting and executing the code below.

```elixir
Kitchen.request("burger with fries")
Kitchen.request("caesar salad")
Kitchen.prepare()
Kitchen.prepare()
```

## Kitchen Stock Application

Happy with our previous work, we are asked to build an inventory management system for the kitchen stock.
Items in a kitchen are stored under a common `:name` and a unique `:id`.

<!-- livebook:{"force_markdown":true} -->

```elixir
Stock.store(%{name: :carton_of_eggs, id: 1})
Stock.store(%{name: :carton_of_eggs, id: 2})
```

We should be able to retrieve an item by it's name, and return the oldest items first.

<!-- livebook:{"force_markdown":true} -->

```elixir
%{name: :carton_of_eggs, id: 1} = Stock.retrieve(:carton_of_eggs)
%{name: :carton_of_eggs, id: 2} = Stock.retrieve(:carton_of_eggs)
```

There are many valid solutions, but you
might consider using a named `:ets` table with the `:bag` configuration.

You may need to start a named process before calling the `Stock` module.

Enter your solution below.

```elixir
:ets.delete(:stock)
:ets.new(:stock, [:named_table, :bag])
```

```elixir
defmodule Stock do
  def init() do
    :ets.delete(:stock)
    :ets.new(:stock, [:bag, :named_table])
  end

  def store(%{name: name, id: id}) do
    :ets.insert(:stock, {name, id})
  end

  def retrieve(item_name) do
    item =
      {name, id} =
      :ets.lookup(:stock, item_name)
      |> Enum.sort_by(fn {_name, id} -> id end)
      |> List.first()

    :ets.delete_object(:stock, item)
    %{name: name, id: id}
  end
end

Stock.init()
```

Test your solution by uncommenting and executing the code below.

```elixir
Stock.store(%{name: :carton_of_eggs, id: 2})
Stock.store(%{name: :carton_of_eggs, id: 1})

%{name: :carton_of_eggs, id: 1} = Stock.retrieve(:carton_of_eggs) |> IO.inspect()
%{name: :carton_of_eggs, id: 2} = Stock.retrieve(:carton_of_eggs) |> IO.inspect()
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish kitchen queue exercise"
```

## Up Next

| Previous                                                                       | Next                                 |
| ------------------------------------------------------------------------------ | -----------------------------------: |
| [Concurrent Image Processing](../exercises/concurrent_image_processing.livemd) | [Scripts](../reading/scripts.livemd) |
