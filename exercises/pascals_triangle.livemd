# Pascal's Triangle

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Pascal's Triangle

In this exercise, you're going to generate Pascal's Triangle for a certain number of rows.

In Pascal's Triangle, each number is the sum of the two integers above it.

```mermaid
flowchart
a[1]
b1[1]
b2[1]
c1[1]
c2[2]
c3[1]
d1[1]
d2[3]
d3[3]
d4[1]
e1[1]
e2[4]
e3[6]
e4[4]
e5[1]

a --> b1
a --> b2

b1 --> c1
b1 --> c2

b2 --> c2
b2 --> c3

c1 --> d1
c1 --> d2

c2 --> d2
c2 --> d3

c3 --> d3
c3 --> d4

d1 --> e1
d1 --> e2

d2 --> e2
d2 --> e3

d3 --> e3
d3 --> e4

d4 --> e4
d4 --> e5
```

<!-- livebook:{"break_markdown":true} -->

We can also represent Pascal's triangle as a list of lists.

<!-- livebook:{"force_markdown":true} -->

```elixir
[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 3, 6, 3, 1]]
```

In the Elixir cell below, finish the `of/1` function in the `Pascal` module which will
return Pascal's triangle in a list for `n` number of rows.

<!-- livebook:{"force_markdown":true} -->

```elixir
Pascal.of(1)
[
  [1]
]

Pascal.of(2)
[
  [1],
  [1, 1],
]

Pascal.of(5)
[
  [1],
  [1, 1],
  [1, 2, 1],
  [1, 3, 3, 1],
  [1, 4, 6, 4, 1]
]

```

### Your Solution

```elixir
defmodule Pascal do
  defp newname(0) do
    [[0]]
  end

  defp newname(1) do
    [[1]]
  end

  defp newname(2) do
    [[1, 1], [1]]
  end

  defp newname(n) when n > 2 do
    IO.inspect(n)
    [h | _t] = prev = newname(n - 1)
    IO.inspect(prev, label: "prev")

    newh =
      h
      |> IO.inspect()
      |> Enum.chunk_every(2, 1, :discard)
      |> IO.inspect(label: "chonked #{n}")
      |> Enum.map(fn each -> Enum.sum(each) end)
      |> IO.inspect(label: "mapped #{n}")
      |> then(fn list -> [1] ++ list ++ [1] end)

    [newh | prev]
  end

  def of(n) do
    Enum.reverse(newname(n))
  end
end

Pascal.of(5)
# Utils.feedback(:pascal, Pascal)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish pascals triangle exercise"
```

## Up Next

| Previous                                   | Next                                   |
| ------------------------------------------ | -------------------------------------: |
| [Fibonacci](../exercises/fibonacci.livemd) | [Sublist](../exercises/sublist.livemd) |
