# Custom Enum With Recursion

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Custom Enum With Recursion

We're going to use `Recursion` to re-implement several of the [Enum](https://hexdocs.pm/elixir/Enum.html) module's functions. For this exercise
you are not allowed to use the [Enum](https://hexdocs.pm/elixir/Enum.html) module.

Implement the following [Enum](https://hexdocs.pm/elixir/Enum.html) functions in this `CustomEnum` function. Each should use recursion
to accomplish the same functionality as the [Enum](https://hexdocs.pm/elixir/Enum.html) module does.

* `reverse/2`
* `each/2`
* `map/2`
* `filter/2`
* `sum/2`

Keep in mind you may need to delegate to another function if an accumulator is required.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
defp recursive_map(list, function, acc) do
  # ...
end

def map(list, function) do
  recursive_map(list, function, [])
end
```

You only need to handle lists, not all collections.

```elixir
defmodule Stink do
  def each([], _function) do
    []
  end

  def each([head | tail], function) do
    [function.(head) | each(tail, function)]
  end

  def sum([head | tail], function) do
  end
end

Stink.sum([1, 2, 3, 5, 15], fn x -> rem(x, 3) == 0 end)
# Stink.new(5)
```

```elixir
defmodule CustomEnum do
  def map([], _function) do
    []
  end

  def map([head | tail], function) do
    [function.(head) | map(tail, function)]
  end

  def reverse([]) do
    []
  end

  def reverse([head | tail]) do
    List.flatten([reverse(tail), head])
  end

  def reduce([], acc, _fun) do
    acc
  end

  def reduce([head | tail], acc, fun) do
    new_acc = fun.(head, acc)
    reduce(tail, new_acc, fun)
  end

  def each([], _function) do
    []
  end

  # def each(list, fn _ -> nil end) do :ok end
  def each([head | tail], function) do
    [function.(head) | each(tail, function)]
    :ok
  end

  def filter([], _function) do
    []
  end

  def filter([head | tail], function) do
    if function.(head) == true do
      [head | filter(tail, function)]
    else
      filter(tail, function)
    end
  end

  def sum([head | tail]) do
    head + sum(tail)
  end
end

Utils.feedback(:enum_recursion, CustomEnum)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish custom enum with recursion exercise"
```

## Up Next

| Previous                                 | Next                                               |
| ---------------------------------------- | -------------------------------------------------: |
| [Recursion](../reading/recursion.livemd) | [Lucas Numbers](../exercises/lucas_numbers.livemd) |
