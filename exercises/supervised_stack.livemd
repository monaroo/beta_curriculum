# Supervised Stack

```elixir
Mix.install([
  {:kino, "~> 0.7.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Supervised Stack

We've created a Stack process.

```elixir
defmodule Stack2 do
  use GenServer

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def init(stack) do
    {:ok, stack}
  end

  def push(pid, item) do
    GenServer.cast(pid, {:push, item})
  end

  def pop(pid) do
    GenServer.call(pid, :pop)
  end

  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  def handle_cast({:push, item}, stack) do
    {:noreply, [item | stack]}
  end
end
```

The Stack process can store a list and `push/2`/`pop/1` elements onto and off of the stack.

```elixir
{:ok, pid} = Stack.start_link([])
Stack.push(pid, 1)
Stack.push(pid, 2)
2 = Stack.pop(pid)
1 = Stack.pop(pid)
```

However, there's a bug. If we try to `pop/1` an item off of an empty stack, the process
will crash due to a function clause error because the `handle_call/2` function expects a list with one or more elements.

Here we use [GenServer.start/2](https://hexdocs.pm/elixir/GenServer.html#start/2) to avoid crashing the livebook.

```elixir
{:ok, pid} = GenServer.start(Stack, [])
Stack.pop(pid)
```

In the Elixir cell below,
start the `Stack` process under a supervisor so that it will restart with an empty stack when it crashes.

```elixir
children = [
  {Stack2, []}
]

{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
```

```elixir
Supervisor.count_children(pid)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish supervised stack exercise"
```

## Up Next

| Previous                                                           | Next                                     |
| ------------------------------------------------------------------ | ---------------------------------------: |
| [Supervised Mix Project](../reading/supervised_mix_project.livemd) | [Dominoes](../exercises/dominoes.livemd) |
