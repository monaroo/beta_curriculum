# Smart Cache

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Smart Cache

A simple implementation of Fibonacci  $fib(n) = fib(n-1) + fib(n - 2)$
is very computationally expensive and creates a lot of duplicated work.

```elixir
defmodule Fib do
  def of(1), do: 0
  def of(2), do: 1
  def of(n), do: of(n - 1) + of(n - 2)
end

Fib.of(30)
```

For example, `Fib.of(30)` calculates `Fib.of(29)` and `Fib.of(28)`.
Which in turn calculates both:

* `Fib.of(28)` and `Fib.of(27)`.
* `Fib.of(27)` and `Fib.of(26)`.

```elixir
Fib.of(30) == Fib.of(29) + Fib.of(28)
Fib.of(29) + Fib.of(28) == Fib.of(28) + Fib.of(27) + Fib.of(27) + Fib.of(26)
```

You can see that we're calculating `Fib.of(27)` twice in only the first step. This
issue of duplicating work gets worse and worse the further we get in the execution.

To avoid duplicated work, Use [Agent](https://hexdocs.pm/elixir/Agent.html) to implement a smart cache for the `Fib` module above.

Ensure that you smart cache values as they are computed, rather than pre-caching results.

```elixir
defmodule FibCache do
  use Agent

  def start_link() do
    Agent.start_link(fn -> %{1 => 0, 2 => 1} end, name: :fib)
  end

  def of(n) do
    case Agent.get(:fib, fn cache -> Map.get(cache, n) end) do
      nil ->
        a = of(n - 1)
        b = of(n - 2)
        answer = a + b
        Agent.update(:fib, fn cache -> Map.put(cache, n, answer) end)
        answer

      answer ->
        answer
    end
  end
end

FibCache.start_link()
FibCache.of(9)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish smart cache exercise"
```

## Up Next

| Previous                                                         | Next                                                                           |
| ---------------------------------------------------------------- | -----------------------------------------------------------------------------: |
| [Inventory Management](../exercises/inventory_management.livemd) | [Concurrent Image Processing](../exercises/concurrent_image_processing.livemd) |
