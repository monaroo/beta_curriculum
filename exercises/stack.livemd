# Stack

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Stack

Test and implement a `Stack` process.

The `Stack` process should store a list as state and `push/2` elements onto the stack, and `pop/2` elements
off of the stack like so.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Stack.start_link([])
[:one] = Stack.push(pid, :one)
[:two, :one] = Stack.push(pid, :two)
:two = Stack.pop(pid)
:one = Stack.pop(pid)
# return no value when the stack is empty
nil = Stack.pop(pid)
```

Implement and test the `Stack` module. Ensure you have at least one test each for the `push/2` function
and the `pop/1` function.

```elixir
defmodule Stack do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def init(state) do
    {:ok, state}
  end

  def push(pid, atom) do
    GenServer.call(pid, {:push, atom})
  end

  def pop(pid) do
    GenServer.call(pid, :pop)
  end

  def handle_call({:push, atom}, _, state) do
    {:reply, [atom | state], [atom | state]}
  end

  def handle_call(:pop, _, [head | tail]) do
    {:reply, head, tail}
  end

  def handle_call(:pop, _, []) do
    {:reply, [], []}
  end
end

defmodule StackTests do
  ExUnit.start(auto_run: false)
  use ExUnit.Case

  test "Stack.push/2" do
    {:ok, pid} = Stack.start_link([])
    assert Stack.push(pid, :hello) == [:hello]
  end

  test "Stack.pop/1" do
    {:ok, pid} = Stack.start_link([])
    Stack.push(pid, :first)
    Stack.push(pid, :second)
    assert Stack.pop(pid) == :second
  end

  ExUnit.run()
end
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish stack exercise"
```

## Up Next

| Previous                                                   | Next                                                   |
| ---------------------------------------------------------- | -----------------------------------------------------: |
| [Testing Genservers](../reading/testing_genservers.livemd) | [Product Filters](../exercises/product_filters.livemd) |
