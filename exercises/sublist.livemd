# Sublist

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Sublist

We are given a list of numbers and we need to return all consecutive sublists
of a given size.

<!-- livebook:{"force_markdown":true} -->

```elixir
iex(1)> list = [1, 1, 2, 3, 1, 4, 2]
[1, 1, 2, 3, 1, 4, 2]
iex(2)> Sublists.sublists(list, 3)
[[1, 1, 2], [1, 2, 3], [2, 3, 1], [3, 1, 4], [1, 4, 2]]
```

## Implementation

```elixir
defmodule Sublist do
  def sublists(list, size) do
    Enum.chunk_every(list, size, 1, :discard)
  end
end

Utils.feedback(:sublist, Sublist)
```

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish sublist exercise"
```

## Up Next

| Previous                                                 | Next                           |
| -------------------------------------------------------- | -----------------------------: |
| [Pascals Triangle](../exercises/pascals_triangle.livemd) | [File](../reading/file.livemd) |
