# Bingo Winner

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Bingo Winner

Bingo is a game where players are given a board of numbers.

Provided a bingo board, determine if the board is a winner.

Numbers are called, and players fill out the matching numbers on their board.

A board is a winner if it has any row, column, or diagonal completely filled.

For example, let's say we have an empty board like so:

<!-- livebook:{"force_markdown":true} -->

```elixir
[
  [nil, nil, nil],
  [nil, nil, nil],
  [nil, nil, nil],
]
```

<!-- livebook:{"break_markdown":true} -->

We'll mark matching numbers using `"X"`.

A winning board would look like:

<!-- livebook:{"force_markdown":true} -->

```elixir
# example win on row
[
  ["X", "X", "X"],
  [nil, nil, nil],
  [nil, nil, nil]
]

# example win on column.
[
  ["X", nil, nil],
  ["X", nil, nil],
  ["X", nil, nil],
]

# example win on diagonal
[
  ["X", nil, nil],
  [nil, "X", nil],
  [nil, nil, "X"],
]
```

<!-- livebook:{"break_markdown":true} -->

Create a `BingoWinner` module below with an `is_winner?/1` function. It should
determine if a board is a winner and return either `false` or `true`.

<!-- livebook:{"force_markdown":true} -->

```elixir
board = [
  [nil, nil, "X"],
  [nil, "X", nil],
  ["X", nil, nil],
]

BingoWinner.is_winner?(board)
true
```

<!-- livebook:{"break_markdown":true} -->

Enter your answer below.

```elixir
defmodule BingoWinner do
  defp across_a(board) do
    if Enum.at(board, 0) == Enum.at(board, 1) == Enum.at(board, 2) do
      "winner!!"
    else
      false
    end
  end

  defp across_b(board) do
    if Enum.at(board, 0) == Enum.at(board, 1) == Enum.at(board, 2) do
      "winner!!"
    else
      false
    end
  end

  defp across_c(board) do
    if Enum.at(board, 0) == Enum.at(board, 1) == Enum.at(board, 2) do
      "winner!!"
    else
      false
    end
  end

  defp down0(board) do
    if Enum.at(board, 0) == Enum.at(board, 0) == Enum.at(board, 0) do
      "winner"
    else
      false
    end
  end

  defp down1(board) do
    if Enum.at(board, 1) == Enum.at(board, 1) == Enum.at(board, 1) do
      "winner"
    else
      false
    end
  end

  defp down2(board) do
    if Enum.at(board, 2) == Enum.at(board, 2) == Enum.at(board, 2) do
      "winner"
    else
      false
    end
  end

  defp diag1(board) do
    if Enum.at(board, 0) == Enum.at(board, 1) == Enum.at(board, 2) do
      "winner"
    else
      false
    end
  end

  defp diag2(board) do
    if Enum.at(board, 2) == Enum.at(board, 1) == Enum.at(board, 2) do
      "winner"
    else
      false
    end
  end

  def is_winner?(board) do
    if is_list(board) do
      across_a(board)
      across_b(board)
      across_c(board)
      down0(board)
      down1(board)
      down2(board)
      diag1(board)
      diag2(board)
    end
  end
end

Utils.feedback(:bingo_winner, BingoWinner)
```

```elixir
defmodule BingoPlayer do
  @doc "takes a board and return a list of rows in the board"
  def rows(board), do: board

  @doc "takes a board and return a list of cols in the board"
  def cols(board) do
    for col <- 0..2 do
      board |> Enum.map(fn row -> Enum.at(row, col) end)
    end
  end

  def diags(board) do
    [
      [
        board |> Enum.at(0) |> Enum.at(0),
        board |> Enum.at(1) |> Enum.at(1),
        board |> Enum.at(2) |> Enum.at(2)
      ],
      [
        board |> Enum.at(2) |> Enum.at(0),
        board |> Enum.at(1) |> Enum.at(1),
        board |> Enum.at(0) |> Enum.at(2)
      ]
    ]
  end

  def combos(board), do: rows(board) ++ cols(board) ++ diags(board)

  def winner_combo?(["X", "X", "X"]), do: true
  def winner_combo?(_), do: false

  def winner?(board) do
    board
    |> combos()
    |> Enum.any?(&winner_combo?/1)
  end
end

board = [
  [nil, nil, "X"],
  [nil, "X", nil],
  ["X", nil, nil]
]

BingoPlayer.winner?(board)
```

## Play Bingo

The Bingo game will now use integers instead of `"X"` and `nil`.

The `Bingo` game will take a list of called numbers and a board.

<!-- livebook:{"force_markdown":true} -->

```elixir
board = [
  [3, 2, 5],
  [1, 6, 7],
  [4, 8, 9],
]

called_numbers = [1, 2, 3]

Bingo.is_winner?(board, called_numbers)
false

called_numbers = [1, 3, 4]

Bingo.is_winner?(board, called_numbers)
true
```

Enter your answer below.

```elixir
defmodule Bingo do
  def rows(board), do: board

  @doc "takes a board and return a list of cols in the board"
  def cols(board) do
    for col <- 0..2 do
      board |> Enum.map(fn row -> Enum.at(row, col) end)
    end
  end

  def diags(board) do
    [
      [
        board |> Enum.at(0) |> Enum.at(0),
        board |> Enum.at(1) |> Enum.at(1),
        board |> Enum.at(2) |> Enum.at(2)
      ],
      [
        board |> Enum.at(2) |> Enum.at(0),
        board |> Enum.at(1) |> Enum.at(1),
        board |> Enum.at(0) |> Enum.at(2)
      ]
    ]
  end

  def combos(board), do: rows(board) ++ cols(board) ++ diags(board)

  def winner_combo?(combo, called_numbers) do
    Enum.all?(combo, fn number -> number in called_numbers end)
  end

  def is_winner?(board, called_numbers) do
    board
    |> combos()
    |> Enum.any?(fn combo -> winner_combo?(combo, called_numbers) end)
  end
end

board = [
  [3, 2, 5],
  [1, 6, 7],
  [4, 8, 9]
]

called_numbers = [3, 1, 4]

Bingo.is_winner?(board, called_numbers)

Utils.feedback(:bingo, Bingo)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish bingo winner exercise"
```

## Up Next

| Previous                                                           | Next                                               |
| ------------------------------------------------------------------ | -------------------------------------------------: |
| [Filter Values By Type](../exercises/filter_values_by_type.livemd) | [Number Wordle](../exercises/number_wordle.livemd) |
