# Bingo Winner

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Bingo Winner

Bingo is a game where players are given a board of numbers.

Provided a bingo board, determine if the board is a winner.

Numbers are called, and players fill out the matching numbers on their board.

A board is a winner if it has any row, column, or diagonal completely filled.

For example, let's say we have an empty board like so:

<!-- livebook:{"force_markdown":true} -->

```elixir
[
  [nil, nil, nil],
  [nil, nil, nil],
  [nil, nil, nil],
]
```

<!-- livebook:{"break_markdown":true} -->

We'll mark matching numbers using `"X"`.

A winning board would look like:

<!-- livebook:{"force_markdown":true} -->

```elixir
# example win on row
[
  ["X", "X", "X"],
  [nil, nil, nil],
  [nil, nil, nil]
]

# example win on column.
[
  ["X", nil, nil],
  ["X", nil, nil],
  ["X", nil, nil],
]

# example win on diagonal
[
  ["X", nil, nil],
  [nil, "X", nil],
  [nil, nil, "X"],
]
```

<!-- livebook:{"break_markdown":true} -->

Create a `BingoWinner` module below with an `is_winner?/1` function. It should
determine if a board is a winner and return either `false` or `true`.

<!-- livebook:{"force_markdown":true} -->

```elixir
board = [
  [nil, nil, "X"],
  [nil, "X", nil],
  ["X", nil, nil],
]

BingoWinner.is_winner?(board)
true
```

<!-- livebook:{"break_markdown":true} -->

Enter your answer below.

```elixir
defmodule BingoWinner do
    board = list_a, list_b, list_c
  def is_winner?(board) do
  end
  defp across_a(board) do
    if Enum.at(list_a, 0) == Enum.at(list_a)
  end
end

Utils.feedback(:bingo_winner, BingoWinner)
```

## Play Bingo

The Bingo game will now use integers instead of `"X"` and `nil`.

The `Bingo` game will take a list of called numbers and a board.

<!-- livebook:{"force_markdown":true} -->

```elixir
board = [
  [3, 2, 5],
  [1, 6, 7],
  [4, 8, 9],
]

called_numbers = [1, 2, 3]

Bingo.is_winner?(board, called_numbers)
false

called_numbers = [1, 3, 4]

Bingo.is_winner?(board, called_numbers)
true
```

Enter your answer below.

```elixir
defmodule Bingo do
  def is_winner?(board, called_numbers) do
  end
end

Utils.feedback(:bingo, Bingo)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish bingo winner exercise"
```

## Up Next

| Previous                                                           | Next                                               |
| ------------------------------------------------------------------ | -------------------------------------------------: |
| [Filter Values By Type](../exercises/filter_values_by_type.livemd) | [Number Wordle](../exercises/number_wordle.livemd) |
