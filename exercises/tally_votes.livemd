# Tally Votes

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Tally Votes

In the Elixir cell below,

* Create a module `VoterTally` with a `tally/1` function.
* The `tally/1` function will accept a list of any atoms as the parameter.
* The atoms represent the votes for each party.
* Return a map with the number of votes for each party.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
VoterTally.tally([:pink, :indigo, :purple, :pink])
%{pink: 2, indigo: 1, purple: 1}
```

```elixir
defmodule VoterTally do
  def tally(votes) do
    Enum.reduce(votes, %{}, fn vote, acc ->
      prev_count = Map.get(acc, vote, 0)
      Map.put(acc, vote, prev_count + 1)
    end)
  end
end

VoterTally.tally([:pink, :indigo, :purple, :pink])
```

```elixir
defmodule VoterTally do
  def tally(votes) do
    Enum.count(votes, &(&1 == hd(votes)))
    # Enum.count(votes, &(&1 == counted_vote))
  end
end

VoterTally.tally([:pink, :indigo, :purple, :pink])

Utils.feedback(:voter_tally, VoterTally)
```

## Voting Power

The system changes again to allow certain individuals/groups more
voting power. Votes will now come in as a keyword list
with the number of votes for the `tally/1` function.

<!-- livebook:{"force_markdown":true} -->

```elixir
VoterPower.tally([dogs: 10, dogs: 20, cats: 2])
%{dogs: 30, cats: 2}
```

You will also need to handle keyword list within the list.

<!-- livebook:{"force_markdown":true} -->

```elixir
VoterPower.tally([:dogs, :dogs, :cats, dogs: 2])
%{dogs: 4, cats: 1}
```

```elixir

```

```elixir
defmodule VoterPower do
  def tally(votes) do
    Enum.reduce(votes, %{}, fn
      {vote, count}, acc ->
        prev_count = Map.get(acc, vote, 0)
        Map.put(acc, vote, prev_count + count)

      vote, acc ->
        prev_count = Map.get(acc, vote, 0)
        Map.put(acc, vote, prev_count + 1)
    end)
  end
end

VoterPower.tally([:dogs, :dogs, :cats, dogs: 2]) |> IO.inspect()
Utils.feedback(:voter_power, VoterPower)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish tally votes exercise"
```

## Up Next

| Previous                                             | Next                                           |
| ---------------------------------------------------- | ---------------------------------------------: |
| [Item Generator](../exercises/item_generator.livemd) | [Item Search](../exercises/item_search.livemd) |
